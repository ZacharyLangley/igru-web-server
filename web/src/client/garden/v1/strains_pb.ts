// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file garden/v1/strains.proto (package garden.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Strain } from "./schema_pb";

/**
 * @generated from message garden.v1.CreateStrainRequest
 */
export class CreateStrainRequest extends Message<CreateStrainRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string group_id = 2;
   */
  groupId = "";

  /**
   * @generated from field: string comment = 3;
   */
  comment = "";

  /**
   * @generated from field: string notes = 4;
   */
  notes = "";

  /**
   * @generated from field: string type = 5;
   */
  type = "";

  /**
   * @generated from field: double price = 6;
   */
  price = 0;

  /**
   * @generated from field: double thc_percent = 7;
   */
  thcPercent = 0;

  /**
   * @generated from field: double cbd_percent = 8;
   */
  cbdPercent = 0;

  /**
   * @generated from field: string parentage = 9;
   */
  parentage = "";

  /**
   * @generated from field: string aroma = 10;
   */
  aroma = "";

  /**
   * @generated from field: string taste = 11;
   */
  taste = "";

  /**
   * @generated from field: string tags = 12;
   */
  tags = "";

  constructor(data?: PartialMessage<CreateStrainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.CreateStrainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "notes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "thc_percent", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "cbd_percent", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "parentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "aroma", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "taste", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateStrainRequest {
    return new CreateStrainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateStrainRequest {
    return new CreateStrainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateStrainRequest {
    return new CreateStrainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateStrainRequest | PlainMessage<CreateStrainRequest> | undefined, b: CreateStrainRequest | PlainMessage<CreateStrainRequest> | undefined): boolean {
    return proto3.util.equals(CreateStrainRequest, a, b);
  }
}

/**
 * @generated from message garden.v1.CreateStrainResponse
 */
export class CreateStrainResponse extends Message<CreateStrainResponse> {
  /**
   * @generated from field: garden.v1.Strain strain = 1;
   */
  strain?: Strain;

  constructor(data?: PartialMessage<CreateStrainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.CreateStrainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "strain", kind: "message", T: Strain },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateStrainResponse {
    return new CreateStrainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateStrainResponse {
    return new CreateStrainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateStrainResponse {
    return new CreateStrainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateStrainResponse | PlainMessage<CreateStrainResponse> | undefined, b: CreateStrainResponse | PlainMessage<CreateStrainResponse> | undefined): boolean {
    return proto3.util.equals(CreateStrainResponse, a, b);
  }
}

/**
 * @generated from message garden.v1.DeleteStrainRequest
 */
export class DeleteStrainRequest extends Message<DeleteStrainRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string group_id = 2;
   */
  groupId = "";

  constructor(data?: PartialMessage<DeleteStrainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.DeleteStrainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteStrainRequest {
    return new DeleteStrainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteStrainRequest {
    return new DeleteStrainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteStrainRequest {
    return new DeleteStrainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteStrainRequest | PlainMessage<DeleteStrainRequest> | undefined, b: DeleteStrainRequest | PlainMessage<DeleteStrainRequest> | undefined): boolean {
    return proto3.util.equals(DeleteStrainRequest, a, b);
  }
}

/**
 * @generated from message garden.v1.DeleteStrainResponse
 */
export class DeleteStrainResponse extends Message<DeleteStrainResponse> {
  /**
   * @generated from field: garden.v1.Strain strain = 1;
   */
  strain?: Strain;

  constructor(data?: PartialMessage<DeleteStrainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.DeleteStrainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "strain", kind: "message", T: Strain },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteStrainResponse {
    return new DeleteStrainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteStrainResponse {
    return new DeleteStrainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteStrainResponse {
    return new DeleteStrainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteStrainResponse | PlainMessage<DeleteStrainResponse> | undefined, b: DeleteStrainResponse | PlainMessage<DeleteStrainResponse> | undefined): boolean {
    return proto3.util.equals(DeleteStrainResponse, a, b);
  }
}

/**
 * @generated from message garden.v1.UpdateStrainRequest
 */
export class UpdateStrainRequest extends Message<UpdateStrainRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string group_id = 3;
   */
  groupId = "";

  /**
   * @generated from field: string comment = 4;
   */
  comment = "";

  /**
   * @generated from field: string notes = 5;
   */
  notes = "";

  /**
   * @generated from field: string type = 6;
   */
  type = "";

  /**
   * @generated from field: double price = 7;
   */
  price = 0;

  /**
   * @generated from field: double thc_percent = 8;
   */
  thcPercent = 0;

  /**
   * @generated from field: double cbd_percent = 9;
   */
  cbdPercent = 0;

  /**
   * @generated from field: string parentage = 10;
   */
  parentage = "";

  /**
   * @generated from field: string aroma = 11;
   */
  aroma = "";

  /**
   * @generated from field: string taste = 12;
   */
  taste = "";

  /**
   * @generated from field: string tags = 13;
   */
  tags = "";

  constructor(data?: PartialMessage<UpdateStrainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.UpdateStrainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "notes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "thc_percent", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "cbd_percent", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 10, name: "parentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "aroma", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "taste", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateStrainRequest {
    return new UpdateStrainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateStrainRequest {
    return new UpdateStrainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateStrainRequest {
    return new UpdateStrainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateStrainRequest | PlainMessage<UpdateStrainRequest> | undefined, b: UpdateStrainRequest | PlainMessage<UpdateStrainRequest> | undefined): boolean {
    return proto3.util.equals(UpdateStrainRequest, a, b);
  }
}

/**
 * @generated from message garden.v1.UpdateStrainResponse
 */
export class UpdateStrainResponse extends Message<UpdateStrainResponse> {
  /**
   * @generated from field: garden.v1.Strain strain = 1;
   */
  strain?: Strain;

  constructor(data?: PartialMessage<UpdateStrainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.UpdateStrainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "strain", kind: "message", T: Strain },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateStrainResponse {
    return new UpdateStrainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateStrainResponse {
    return new UpdateStrainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateStrainResponse {
    return new UpdateStrainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateStrainResponse | PlainMessage<UpdateStrainResponse> | undefined, b: UpdateStrainResponse | PlainMessage<UpdateStrainResponse> | undefined): boolean {
    return proto3.util.equals(UpdateStrainResponse, a, b);
  }
}

/**
 * @generated from message garden.v1.GetStrainsRequest
 */
export class GetStrainsRequest extends Message<GetStrainsRequest> {
  /**
   * @generated from field: string group_id = 1;
   */
  groupId = "";

  constructor(data?: PartialMessage<GetStrainsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.GetStrainsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStrainsRequest {
    return new GetStrainsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStrainsRequest {
    return new GetStrainsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStrainsRequest {
    return new GetStrainsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStrainsRequest | PlainMessage<GetStrainsRequest> | undefined, b: GetStrainsRequest | PlainMessage<GetStrainsRequest> | undefined): boolean {
    return proto3.util.equals(GetStrainsRequest, a, b);
  }
}

/**
 * @generated from message garden.v1.GetStrainsResponse
 */
export class GetStrainsResponse extends Message<GetStrainsResponse> {
  /**
   * @generated from field: repeated garden.v1.Strain strains = 1;
   */
  strains: Strain[] = [];

  constructor(data?: PartialMessage<GetStrainsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.GetStrainsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "strains", kind: "message", T: Strain, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStrainsResponse {
    return new GetStrainsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStrainsResponse {
    return new GetStrainsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStrainsResponse {
    return new GetStrainsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStrainsResponse | PlainMessage<GetStrainsResponse> | undefined, b: GetStrainsResponse | PlainMessage<GetStrainsResponse> | undefined): boolean {
    return proto3.util.equals(GetStrainsResponse, a, b);
  }
}

/**
 * @generated from message garden.v1.GetStrainRequest
 */
export class GetStrainRequest extends Message<GetStrainRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string group_id = 2;
   */
  groupId = "";

  constructor(data?: PartialMessage<GetStrainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.GetStrainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStrainRequest {
    return new GetStrainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStrainRequest {
    return new GetStrainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStrainRequest {
    return new GetStrainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStrainRequest | PlainMessage<GetStrainRequest> | undefined, b: GetStrainRequest | PlainMessage<GetStrainRequest> | undefined): boolean {
    return proto3.util.equals(GetStrainRequest, a, b);
  }
}

/**
 * @generated from message garden.v1.GetStrainResponse
 */
export class GetStrainResponse extends Message<GetStrainResponse> {
  /**
   * @generated from field: garden.v1.Strain strain = 1;
   */
  strain?: Strain;

  constructor(data?: PartialMessage<GetStrainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.GetStrainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "strain", kind: "message", T: Strain },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStrainResponse {
    return new GetStrainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStrainResponse {
    return new GetStrainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStrainResponse {
    return new GetStrainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStrainResponse | PlainMessage<GetStrainResponse> | undefined, b: GetStrainResponse | PlainMessage<GetStrainResponse> | undefined): boolean {
    return proto3.util.equals(GetStrainResponse, a, b);
  }
}

