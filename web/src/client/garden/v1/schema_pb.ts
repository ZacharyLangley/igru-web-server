// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file garden/v1/schema.proto (package garden.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message garden.v1.Garden
 */
export class Garden extends Message<Garden> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string group_id = 3;
   */
  groupId = "";

  /**
   * @generated from field: string comment = 4;
   */
  comment = "";

  /**
   * @generated from field: string location = 5;
   */
  location = "";

  /**
   * @generated from field: string grow_type = 6;
   */
  growType = "";

  /**
   * @generated from field: string grow_size = 7;
   */
  growSize = "";

  /**
   * @generated from field: string grow_style = 8;
   */
  growStyle = "";

  /**
   * @generated from field: string container_size = 9;
   */
  containerSize = "";

  /**
   * @generated from field: string tags = 10;
   */
  tags = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 11;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 12;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Garden>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.Garden";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "grow_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "grow_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "grow_style", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "container_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "created_at", kind: "message", T: Timestamp },
    { no: 12, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Garden {
    return new Garden().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Garden {
    return new Garden().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Garden {
    return new Garden().fromJsonString(jsonString, options);
  }

  static equals(a: Garden | PlainMessage<Garden> | undefined, b: Garden | PlainMessage<Garden> | undefined): boolean {
    return proto3.util.equals(Garden, a, b);
  }
}

/**
 * @generated from message garden.v1.Plant
 */
export class Plant extends Message<Plant> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string group_id = 3;
   */
  groupId = "";

  /**
   * @generated from field: string comment = 4;
   */
  comment = "";

  /**
   * @generated from field: string notes = 5;
   */
  notes = "";

  /**
   * @generated from field: string grow_cycle_length = 6;
   */
  growCycleLength = "";

  /**
   * @generated from field: string parentage = 7;
   */
  parentage = "";

  /**
   * @generated from field: string origin = 8;
   */
  origin = "";

  /**
   * @generated from field: string gender = 9;
   */
  gender = "";

  /**
   * @generated from field: double days_flowering = 10;
   */
  daysFlowering = 0;

  /**
   * @generated from field: double days_cured = 11;
   */
  daysCured = 0;

  /**
   * @generated from field: string harvested_weight = 12;
   */
  harvestedWeight = "";

  /**
   * @generated from field: double bud_density = 13;
   */
  budDensity = 0;

  /**
   * @generated from field: bool bud_pistils = 14;
   */
  budPistils = false;

  /**
   * @generated from field: string tags = 15;
   */
  tags = "";

  /**
   * @generated from field: google.protobuf.Timestamp acquired_at = 16;
   */
  acquiredAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 17;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 18;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Plant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.Plant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "notes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "grow_cycle_length", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "parentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "gender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "days_flowering", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 11, name: "days_cured", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "harvested_weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "bud_density", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "bud_pistils", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "acquired_at", kind: "message", T: Timestamp },
    { no: 17, name: "created_at", kind: "message", T: Timestamp },
    { no: 18, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plant {
    return new Plant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plant {
    return new Plant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plant {
    return new Plant().fromJsonString(jsonString, options);
  }

  static equals(a: Plant | PlainMessage<Plant> | undefined, b: Plant | PlainMessage<Plant> | undefined): boolean {
    return proto3.util.equals(Plant, a, b);
  }
}

/**
 * @generated from message garden.v1.Strain
 */
export class Strain extends Message<Strain> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string group_id = 3;
   */
  groupId = "";

  /**
   * @generated from field: string comment = 4;
   */
  comment = "";

  /**
   * @generated from field: string notes = 5;
   */
  notes = "";

  /**
   * @generated from field: string type = 6;
   */
  type = "";

  /**
   * @generated from field: double price = 7;
   */
  price = 0;

  /**
   * @generated from field: double thc_percent = 8;
   */
  thcPercent = 0;

  /**
   * @generated from field: double cbd_percent = 9;
   */
  cbdPercent = 0;

  /**
   * @generated from field: string parentage = 10;
   */
  parentage = "";

  /**
   * @generated from field: string aroma = 11;
   */
  aroma = "";

  /**
   * @generated from field: string taste = 12;
   */
  taste = "";

  /**
   * @generated from field: string tags = 13;
   */
  tags = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 14;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 15;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Strain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.Strain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "notes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "thc_percent", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "cbd_percent", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 10, name: "parentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "aroma", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "taste", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "created_at", kind: "message", T: Timestamp },
    { no: 15, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Strain {
    return new Strain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Strain {
    return new Strain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Strain {
    return new Strain().fromJsonString(jsonString, options);
  }

  static equals(a: Strain | PlainMessage<Strain> | undefined, b: Strain | PlainMessage<Strain> | undefined): boolean {
    return proto3.util.equals(Strain, a, b);
  }
}

/**
 * @generated from message garden.v1.Recipe
 */
export class Recipe extends Message<Recipe> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string comment = 3;
   */
  comment = "";

  /**
   * @generated from field: string ingredients = 4;
   */
  ingredients = "";

  /**
   * @generated from field: string instructions = 5;
   */
  instructions = "";

  /**
   * @generated from field: double ph = 6;
   */
  ph = 0;

  /**
   * @generated from field: double mix_time_milliseconds = 7;
   */
  mixTimeMilliseconds = 0;

  /**
   * @generated from field: string tags = 8;
   */
  tags = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 13;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 14;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Recipe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "garden.v1.Recipe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ingredients", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "instructions", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "ph", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "mix_time_milliseconds", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "created_at", kind: "message", T: Timestamp },
    { no: 14, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Recipe {
    return new Recipe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Recipe {
    return new Recipe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Recipe {
    return new Recipe().fromJsonString(jsonString, options);
  }

  static equals(a: Recipe | PlainMessage<Recipe> | undefined, b: Recipe | PlainMessage<Recipe> | undefined): boolean {
    return proto3.util.equals(Recipe, a, b);
  }
}

