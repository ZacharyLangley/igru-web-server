// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file node/v1/schema.proto (package node.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message node.v1.Node
 */
export class Node extends Message<Node> {
  /**
   * @generated from field: string mac_address = 1;
   */
  macAddress = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string owned_by = 3;
   */
  ownedBy = "";

  /**
   * @generated from field: map<string, string> custom_labels = 4;
   */
  customLabels: { [key: string]: string } = {};

  /**
   * @generated from field: repeated node.v1.Sensor sensors = 5;
   */
  sensors: Sensor[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp adopted_at = 7;
   */
  adoptedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 8;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "node.v1.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mac_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owned_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "custom_labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "sensors", kind: "message", T: Sensor, repeated: true },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "adopted_at", kind: "message", T: Timestamp },
    { no: 8, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

/**
 * @generated from message node.v1.Sensor
 */
export class Sensor extends Message<Sensor> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string model = 2;
   */
  model = "";

  /**
   * @generated from field: node.v1.Sensor.Category category = 3;
   */
  category = Sensor_Category.UNSPECIFIED;

  constructor(data?: PartialMessage<Sensor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "node.v1.Sensor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "category", kind: "enum", T: proto3.getEnumType(Sensor_Category) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sensor {
    return new Sensor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sensor {
    return new Sensor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sensor {
    return new Sensor().fromJsonString(jsonString, options);
  }

  static equals(a: Sensor | PlainMessage<Sensor> | undefined, b: Sensor | PlainMessage<Sensor> | undefined): boolean {
    return proto3.util.equals(Sensor, a, b);
  }
}

/**
 * @generated from enum node.v1.Sensor.Category
 */
export enum Sensor_Category {
  /**
   * @generated from enum value: CATEGORY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CATEGORY_TEMPERATURE = 1;
   */
  TEMPERATURE = 1,

  /**
   * @generated from enum value: CATEGORY_HUMIDITY = 2;
   */
  HUMIDITY = 2,

  /**
   * @generated from enum value: CATEGORY_AIR_PRESSURE = 3;
   */
  AIR_PRESSURE = 3,

  /**
   * @generated from enum value: CATEGORY_LIGHT = 4;
   */
  LIGHT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Sensor_Category)
proto3.util.setEnumType(Sensor_Category, "node.v1.Sensor.Category", [
  { no: 0, name: "CATEGORY_UNSPECIFIED" },
  { no: 1, name: "CATEGORY_TEMPERATURE" },
  { no: 2, name: "CATEGORY_HUMIDITY" },
  { no: 3, name: "CATEGORY_AIR_PRESSURE" },
  { no: 4, name: "CATEGORY_LIGHT" },
]);

