// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package gardens

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createGarden = `-- name: CreateGarden :one
INSERT INTO gardens (
  name, comment, location, grow_type, grow_size, grow_style, container_size, tags, created_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, name, comment, location, grow_type, grow_size, grow_style, container_size, tags, created_at, updated_at
`

type CreateGardenParams struct {
	Name          string
	Comment       string
	Location      string
	GrowType      string
	GrowSize      string
	GrowStyle     string
	ContainerSize string
	Tags          string
	CreatedAt     time.Time
}

func (q *Queries) CreateGarden(ctx context.Context, arg CreateGardenParams) (Garden, error) {
	row := q.db.QueryRow(ctx, createGarden,
		arg.Name,
		arg.Comment,
		arg.Location,
		arg.GrowType,
		arg.GrowSize,
		arg.GrowStyle,
		arg.ContainerSize,
		arg.Tags,
		arg.CreatedAt,
	)
	var i Garden
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Comment,
		&i.Location,
		&i.GrowType,
		&i.GrowSize,
		&i.GrowStyle,
		&i.ContainerSize,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGarden = `-- name: DeleteGarden :exec
DELETE FROM gardens
WHERE id = $1
`

func (q *Queries) DeleteGarden(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGarden, id)
	return err
}

const getGarden = `-- name: GetGarden :one
SELECT id, name, comment, location, grow_type, grow_size, grow_style, container_size, tags, created_at, updated_at FROM gardens
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGarden(ctx context.Context, id uuid.UUID) (Garden, error) {
	row := q.db.QueryRow(ctx, getGarden, id)
	var i Garden
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Comment,
		&i.Location,
		&i.GrowType,
		&i.GrowSize,
		&i.GrowStyle,
		&i.ContainerSize,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGardens = `-- name: GetGardens :many
SELECT id, name, comment, location, grow_type, grow_size, grow_style, container_size, tags, created_at, updated_at FROM gardens
`

func (q *Queries) GetGardens(ctx context.Context) ([]Garden, error) {
	rows, err := q.db.Query(ctx, getGardens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Garden
	for rows.Next() {
		var i Garden
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Comment,
			&i.Location,
			&i.GrowType,
			&i.GrowSize,
			&i.GrowStyle,
			&i.ContainerSize,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGarden = `-- name: UpdateGarden :one
UPDATE gardens
SET name = $2, comment= $3, location = $4, grow_type = $5, grow_size = $6, grow_style = $7, container_size = $8, tags = $9, created_at = $10, updated_at=CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, comment, location, grow_type, grow_size, grow_style, container_size, tags, created_at, updated_at
`

type UpdateGardenParams struct {
	ID            uuid.UUID
	Name          string
	Comment       string
	Location      string
	GrowType      string
	GrowSize      string
	GrowStyle     string
	ContainerSize string
	Tags          string
	CreatedAt     time.Time
}

func (q *Queries) UpdateGarden(ctx context.Context, arg UpdateGardenParams) (Garden, error) {
	row := q.db.QueryRow(ctx, updateGarden,
		arg.ID,
		arg.Name,
		arg.Comment,
		arg.Location,
		arg.GrowType,
		arg.GrowSize,
		arg.GrowStyle,
		arg.ContainerSize,
		arg.Tags,
		arg.CreatedAt,
	)
	var i Garden
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Comment,
		&i.Location,
		&i.GrowType,
		&i.GrowSize,
		&i.GrowStyle,
		&i.ContainerSize,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
