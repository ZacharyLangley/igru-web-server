// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: node/v1/node.proto

package nodev1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ZacharyLangley/igru-web-server/pkg/proto/node/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// NodeServiceName is the fully-qualified name of the NodeService service.
	NodeServiceName = "node.v1.NodeService"
)

// NodeServiceClient is a client for the node.v1.NodeService service.
type NodeServiceClient interface {
	UpdateNode(context.Context, *connect_go.Request[v1.UpdateNodeRequest]) (*connect_go.Response[v1.UpdateNodeResponse], error)
	GetNodes(context.Context, *connect_go.Request[v1.GetNodesRequest]) (*connect_go.Response[v1.GetNodesResponse], error)
	GetNode(context.Context, *connect_go.Request[v1.GetNodeRequest]) (*connect_go.Response[v1.GetNodeResponse], error)
}

// NewNodeServiceClient constructs a client for the node.v1.NodeService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NodeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &nodeServiceClient{
		updateNode: connect_go.NewClient[v1.UpdateNodeRequest, v1.UpdateNodeResponse](
			httpClient,
			baseURL+"/node.v1.NodeService/UpdateNode",
			opts...,
		),
		getNodes: connect_go.NewClient[v1.GetNodesRequest, v1.GetNodesResponse](
			httpClient,
			baseURL+"/node.v1.NodeService/GetNodes",
			opts...,
		),
		getNode: connect_go.NewClient[v1.GetNodeRequest, v1.GetNodeResponse](
			httpClient,
			baseURL+"/node.v1.NodeService/GetNode",
			opts...,
		),
	}
}

// nodeServiceClient implements NodeServiceClient.
type nodeServiceClient struct {
	updateNode *connect_go.Client[v1.UpdateNodeRequest, v1.UpdateNodeResponse]
	getNodes   *connect_go.Client[v1.GetNodesRequest, v1.GetNodesResponse]
	getNode    *connect_go.Client[v1.GetNodeRequest, v1.GetNodeResponse]
}

// UpdateNode calls node.v1.NodeService.UpdateNode.
func (c *nodeServiceClient) UpdateNode(ctx context.Context, req *connect_go.Request[v1.UpdateNodeRequest]) (*connect_go.Response[v1.UpdateNodeResponse], error) {
	return c.updateNode.CallUnary(ctx, req)
}

// GetNodes calls node.v1.NodeService.GetNodes.
func (c *nodeServiceClient) GetNodes(ctx context.Context, req *connect_go.Request[v1.GetNodesRequest]) (*connect_go.Response[v1.GetNodesResponse], error) {
	return c.getNodes.CallUnary(ctx, req)
}

// GetNode calls node.v1.NodeService.GetNode.
func (c *nodeServiceClient) GetNode(ctx context.Context, req *connect_go.Request[v1.GetNodeRequest]) (*connect_go.Response[v1.GetNodeResponse], error) {
	return c.getNode.CallUnary(ctx, req)
}

// NodeServiceHandler is an implementation of the node.v1.NodeService service.
type NodeServiceHandler interface {
	UpdateNode(context.Context, *connect_go.Request[v1.UpdateNodeRequest]) (*connect_go.Response[v1.UpdateNodeResponse], error)
	GetNodes(context.Context, *connect_go.Request[v1.GetNodesRequest]) (*connect_go.Response[v1.GetNodesResponse], error)
	GetNode(context.Context, *connect_go.Request[v1.GetNodeRequest]) (*connect_go.Response[v1.GetNodeResponse], error)
}

// NewNodeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeServiceHandler(svc NodeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/node.v1.NodeService/UpdateNode", connect_go.NewUnaryHandler(
		"/node.v1.NodeService/UpdateNode",
		svc.UpdateNode,
		opts...,
	))
	mux.Handle("/node.v1.NodeService/GetNodes", connect_go.NewUnaryHandler(
		"/node.v1.NodeService/GetNodes",
		svc.GetNodes,
		opts...,
	))
	mux.Handle("/node.v1.NodeService/GetNode", connect_go.NewUnaryHandler(
		"/node.v1.NodeService/GetNode",
		svc.GetNode,
		opts...,
	))
	return "/node.v1.NodeService/", mux
}

// UnimplementedNodeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeServiceHandler struct{}

func (UnimplementedNodeServiceHandler) UpdateNode(context.Context, *connect_go.Request[v1.UpdateNodeRequest]) (*connect_go.Response[v1.UpdateNodeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("node.v1.NodeService.UpdateNode is not implemented"))
}

func (UnimplementedNodeServiceHandler) GetNodes(context.Context, *connect_go.Request[v1.GetNodesRequest]) (*connect_go.Response[v1.GetNodesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("node.v1.NodeService.GetNodes is not implemented"))
}

func (UnimplementedNodeServiceHandler) GetNode(context.Context, *connect_go.Request[v1.GetNodeRequest]) (*connect_go.Response[v1.GetNodeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("node.v1.NodeService.GetNode is not implemented"))
}
