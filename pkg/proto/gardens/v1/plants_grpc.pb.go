// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gardens/v1/plants.proto

package gardensv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlantsServiceClient is the client API for PlantsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlantsServiceClient interface {
	CreatePlant(ctx context.Context, in *CreatePlantRequest, opts ...grpc.CallOption) (*CreatePlantResponse, error)
	DeletePlant(ctx context.Context, in *DeletePlantRequest, opts ...grpc.CallOption) (*DeletePlantResponse, error)
	UpdatePlant(ctx context.Context, in *UpdatePlantRequest, opts ...grpc.CallOption) (*UpdatePlantResponse, error)
	GetPlants(ctx context.Context, in *GetPlantsRequest, opts ...grpc.CallOption) (*GetPlantsResponse, error)
	GetPlant(ctx context.Context, in *GetPlantRequest, opts ...grpc.CallOption) (*GetPlantResponse, error)
}

type plantsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlantsServiceClient(cc grpc.ClientConnInterface) PlantsServiceClient {
	return &plantsServiceClient{cc}
}

func (c *plantsServiceClient) CreatePlant(ctx context.Context, in *CreatePlantRequest, opts ...grpc.CallOption) (*CreatePlantResponse, error) {
	out := new(CreatePlantResponse)
	err := c.cc.Invoke(ctx, "/gardens.v1.PlantsService/CreatePlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsServiceClient) DeletePlant(ctx context.Context, in *DeletePlantRequest, opts ...grpc.CallOption) (*DeletePlantResponse, error) {
	out := new(DeletePlantResponse)
	err := c.cc.Invoke(ctx, "/gardens.v1.PlantsService/DeletePlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsServiceClient) UpdatePlant(ctx context.Context, in *UpdatePlantRequest, opts ...grpc.CallOption) (*UpdatePlantResponse, error) {
	out := new(UpdatePlantResponse)
	err := c.cc.Invoke(ctx, "/gardens.v1.PlantsService/UpdatePlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsServiceClient) GetPlants(ctx context.Context, in *GetPlantsRequest, opts ...grpc.CallOption) (*GetPlantsResponse, error) {
	out := new(GetPlantsResponse)
	err := c.cc.Invoke(ctx, "/gardens.v1.PlantsService/GetPlants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsServiceClient) GetPlant(ctx context.Context, in *GetPlantRequest, opts ...grpc.CallOption) (*GetPlantResponse, error) {
	out := new(GetPlantResponse)
	err := c.cc.Invoke(ctx, "/gardens.v1.PlantsService/GetPlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlantsServiceServer is the server API for PlantsService service.
// All implementations must embed UnimplementedPlantsServiceServer
// for forward compatibility
type PlantsServiceServer interface {
	CreatePlant(context.Context, *CreatePlantRequest) (*CreatePlantResponse, error)
	DeletePlant(context.Context, *DeletePlantRequest) (*DeletePlantResponse, error)
	UpdatePlant(context.Context, *UpdatePlantRequest) (*UpdatePlantResponse, error)
	GetPlants(context.Context, *GetPlantsRequest) (*GetPlantsResponse, error)
	GetPlant(context.Context, *GetPlantRequest) (*GetPlantResponse, error)
	mustEmbedUnimplementedPlantsServiceServer()
}

// UnimplementedPlantsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlantsServiceServer struct {
}

func (UnimplementedPlantsServiceServer) CreatePlant(context.Context, *CreatePlantRequest) (*CreatePlantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlant not implemented")
}
func (UnimplementedPlantsServiceServer) DeletePlant(context.Context, *DeletePlantRequest) (*DeletePlantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlant not implemented")
}
func (UnimplementedPlantsServiceServer) UpdatePlant(context.Context, *UpdatePlantRequest) (*UpdatePlantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlant not implemented")
}
func (UnimplementedPlantsServiceServer) GetPlants(context.Context, *GetPlantsRequest) (*GetPlantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlants not implemented")
}
func (UnimplementedPlantsServiceServer) GetPlant(context.Context, *GetPlantRequest) (*GetPlantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlant not implemented")
}
func (UnimplementedPlantsServiceServer) mustEmbedUnimplementedPlantsServiceServer() {}

// UnsafePlantsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlantsServiceServer will
// result in compilation errors.
type UnsafePlantsServiceServer interface {
	mustEmbedUnimplementedPlantsServiceServer()
}

func RegisterPlantsServiceServer(s grpc.ServiceRegistrar, srv PlantsServiceServer) {
	s.RegisterService(&PlantsService_ServiceDesc, srv)
}

func _PlantsService_CreatePlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServiceServer).CreatePlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gardens.v1.PlantsService/CreatePlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServiceServer).CreatePlant(ctx, req.(*CreatePlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsService_DeletePlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServiceServer).DeletePlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gardens.v1.PlantsService/DeletePlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServiceServer).DeletePlant(ctx, req.(*DeletePlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsService_UpdatePlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServiceServer).UpdatePlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gardens.v1.PlantsService/UpdatePlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServiceServer).UpdatePlant(ctx, req.(*UpdatePlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsService_GetPlants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServiceServer).GetPlants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gardens.v1.PlantsService/GetPlants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServiceServer).GetPlants(ctx, req.(*GetPlantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsService_GetPlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServiceServer).GetPlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gardens.v1.PlantsService/GetPlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServiceServer).GetPlant(ctx, req.(*GetPlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlantsService_ServiceDesc is the grpc.ServiceDesc for PlantsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlantsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gardens.v1.PlantsService",
	HandlerType: (*PlantsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlant",
			Handler:    _PlantsService_CreatePlant_Handler,
		},
		{
			MethodName: "DeletePlant",
			Handler:    _PlantsService_DeletePlant_Handler,
		},
		{
			MethodName: "UpdatePlant",
			Handler:    _PlantsService_UpdatePlant_Handler,
		},
		{
			MethodName: "GetPlants",
			Handler:    _PlantsService_GetPlants_Handler,
		},
		{
			MethodName: "GetPlant",
			Handler:    _PlantsService_GetPlant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gardens/v1/plants.proto",
}
