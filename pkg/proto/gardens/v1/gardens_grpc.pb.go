// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gardens/v1/gardens.proto

package gardensv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GardensServiceClient is the client API for GardensService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GardensServiceClient interface {
	CreateGarden(ctx context.Context, in *CreateGardenRequest, opts ...grpc.CallOption) (*CreateGardenResponse, error)
	DeleteGarden(ctx context.Context, in *DeleteGardenRequest, opts ...grpc.CallOption) (*DeleteGardenResponse, error)
	UpdateGarden(ctx context.Context, in *UpdateGardenRequest, opts ...grpc.CallOption) (*UpdateGardenResponse, error)
	GetGardens(ctx context.Context, in *GetGardensRequest, opts ...grpc.CallOption) (*GetGardensResponse, error)
	GetGarden(ctx context.Context, in *GetGardenRequest, opts ...grpc.CallOption) (*GetGardenResponse, error)
}

type gardensServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGardensServiceClient(cc grpc.ClientConnInterface) GardensServiceClient {
	return &gardensServiceClient{cc}
}

func (c *gardensServiceClient) CreateGarden(ctx context.Context, in *CreateGardenRequest, opts ...grpc.CallOption) (*CreateGardenResponse, error) {
	out := new(CreateGardenResponse)
	err := c.cc.Invoke(ctx, "/gardens.v1.GardensService/CreateGarden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardensServiceClient) DeleteGarden(ctx context.Context, in *DeleteGardenRequest, opts ...grpc.CallOption) (*DeleteGardenResponse, error) {
	out := new(DeleteGardenResponse)
	err := c.cc.Invoke(ctx, "/gardens.v1.GardensService/DeleteGarden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardensServiceClient) UpdateGarden(ctx context.Context, in *UpdateGardenRequest, opts ...grpc.CallOption) (*UpdateGardenResponse, error) {
	out := new(UpdateGardenResponse)
	err := c.cc.Invoke(ctx, "/gardens.v1.GardensService/UpdateGarden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardensServiceClient) GetGardens(ctx context.Context, in *GetGardensRequest, opts ...grpc.CallOption) (*GetGardensResponse, error) {
	out := new(GetGardensResponse)
	err := c.cc.Invoke(ctx, "/gardens.v1.GardensService/GetGardens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardensServiceClient) GetGarden(ctx context.Context, in *GetGardenRequest, opts ...grpc.CallOption) (*GetGardenResponse, error) {
	out := new(GetGardenResponse)
	err := c.cc.Invoke(ctx, "/gardens.v1.GardensService/GetGarden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GardensServiceServer is the server API for GardensService service.
// All implementations must embed UnimplementedGardensServiceServer
// for forward compatibility
type GardensServiceServer interface {
	CreateGarden(context.Context, *CreateGardenRequest) (*CreateGardenResponse, error)
	DeleteGarden(context.Context, *DeleteGardenRequest) (*DeleteGardenResponse, error)
	UpdateGarden(context.Context, *UpdateGardenRequest) (*UpdateGardenResponse, error)
	GetGardens(context.Context, *GetGardensRequest) (*GetGardensResponse, error)
	GetGarden(context.Context, *GetGardenRequest) (*GetGardenResponse, error)
	mustEmbedUnimplementedGardensServiceServer()
}

// UnimplementedGardensServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGardensServiceServer struct {
}

func (UnimplementedGardensServiceServer) CreateGarden(context.Context, *CreateGardenRequest) (*CreateGardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGarden not implemented")
}
func (UnimplementedGardensServiceServer) DeleteGarden(context.Context, *DeleteGardenRequest) (*DeleteGardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGarden not implemented")
}
func (UnimplementedGardensServiceServer) UpdateGarden(context.Context, *UpdateGardenRequest) (*UpdateGardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGarden not implemented")
}
func (UnimplementedGardensServiceServer) GetGardens(context.Context, *GetGardensRequest) (*GetGardensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGardens not implemented")
}
func (UnimplementedGardensServiceServer) GetGarden(context.Context, *GetGardenRequest) (*GetGardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGarden not implemented")
}
func (UnimplementedGardensServiceServer) mustEmbedUnimplementedGardensServiceServer() {}

// UnsafeGardensServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GardensServiceServer will
// result in compilation errors.
type UnsafeGardensServiceServer interface {
	mustEmbedUnimplementedGardensServiceServer()
}

func RegisterGardensServiceServer(s grpc.ServiceRegistrar, srv GardensServiceServer) {
	s.RegisterService(&GardensService_ServiceDesc, srv)
}

func _GardensService_CreateGarden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGardenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardensServiceServer).CreateGarden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gardens.v1.GardensService/CreateGarden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardensServiceServer).CreateGarden(ctx, req.(*CreateGardenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardensService_DeleteGarden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGardenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardensServiceServer).DeleteGarden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gardens.v1.GardensService/DeleteGarden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardensServiceServer).DeleteGarden(ctx, req.(*DeleteGardenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardensService_UpdateGarden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGardenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardensServiceServer).UpdateGarden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gardens.v1.GardensService/UpdateGarden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardensServiceServer).UpdateGarden(ctx, req.(*UpdateGardenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardensService_GetGardens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGardensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardensServiceServer).GetGardens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gardens.v1.GardensService/GetGardens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardensServiceServer).GetGardens(ctx, req.(*GetGardensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardensService_GetGarden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGardenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardensServiceServer).GetGarden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gardens.v1.GardensService/GetGarden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardensServiceServer).GetGarden(ctx, req.(*GetGardenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GardensService_ServiceDesc is the grpc.ServiceDesc for GardensService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GardensService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gardens.v1.GardensService",
	HandlerType: (*GardensServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGarden",
			Handler:    _GardensService_CreateGarden_Handler,
		},
		{
			MethodName: "DeleteGarden",
			Handler:    _GardensService_DeleteGarden_Handler,
		},
		{
			MethodName: "UpdateGarden",
			Handler:    _GardensService_UpdateGarden_Handler,
		},
		{
			MethodName: "GetGardens",
			Handler:    _GardensService_GetGardens_Handler,
		},
		{
			MethodName: "GetGarden",
			Handler:    _GardensService_GetGarden_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gardens/v1/gardens.proto",
}
