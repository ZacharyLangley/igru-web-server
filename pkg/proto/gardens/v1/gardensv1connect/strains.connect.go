// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gardens/v1/strains.proto

package gardensv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ZacharyLangley/igru-web-server/pkg/proto/gardens/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StrainsServiceName is the fully-qualified name of the StrainsService service.
	StrainsServiceName = "gardens.v1.StrainsService"
)

// StrainsServiceClient is a client for the gardens.v1.StrainsService service.
type StrainsServiceClient interface {
	CreateStrain(context.Context, *connect_go.Request[v1.CreateStrainRequest]) (*connect_go.Response[v1.CreateStrainResponse], error)
	DeleteStrain(context.Context, *connect_go.Request[v1.DeleteStrainRequest]) (*connect_go.Response[v1.DeleteStrainResponse], error)
	UpdateStrain(context.Context, *connect_go.Request[v1.UpdateStrainRequest]) (*connect_go.Response[v1.UpdateStrainResponse], error)
	GetStrains(context.Context, *connect_go.Request[v1.GetStrainsRequest]) (*connect_go.Response[v1.GetStrainsResponse], error)
	GetStrain(context.Context, *connect_go.Request[v1.GetStrainRequest]) (*connect_go.Response[v1.GetStrainResponse], error)
}

// NewStrainsServiceClient constructs a client for the gardens.v1.StrainsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStrainsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StrainsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &strainsServiceClient{
		createStrain: connect_go.NewClient[v1.CreateStrainRequest, v1.CreateStrainResponse](
			httpClient,
			baseURL+"/gardens.v1.StrainsService/CreateStrain",
			opts...,
		),
		deleteStrain: connect_go.NewClient[v1.DeleteStrainRequest, v1.DeleteStrainResponse](
			httpClient,
			baseURL+"/gardens.v1.StrainsService/DeleteStrain",
			opts...,
		),
		updateStrain: connect_go.NewClient[v1.UpdateStrainRequest, v1.UpdateStrainResponse](
			httpClient,
			baseURL+"/gardens.v1.StrainsService/UpdateStrain",
			opts...,
		),
		getStrains: connect_go.NewClient[v1.GetStrainsRequest, v1.GetStrainsResponse](
			httpClient,
			baseURL+"/gardens.v1.StrainsService/GetStrains",
			opts...,
		),
		getStrain: connect_go.NewClient[v1.GetStrainRequest, v1.GetStrainResponse](
			httpClient,
			baseURL+"/gardens.v1.StrainsService/GetStrain",
			opts...,
		),
	}
}

// strainsServiceClient implements StrainsServiceClient.
type strainsServiceClient struct {
	createStrain *connect_go.Client[v1.CreateStrainRequest, v1.CreateStrainResponse]
	deleteStrain *connect_go.Client[v1.DeleteStrainRequest, v1.DeleteStrainResponse]
	updateStrain *connect_go.Client[v1.UpdateStrainRequest, v1.UpdateStrainResponse]
	getStrains   *connect_go.Client[v1.GetStrainsRequest, v1.GetStrainsResponse]
	getStrain    *connect_go.Client[v1.GetStrainRequest, v1.GetStrainResponse]
}

// CreateStrain calls gardens.v1.StrainsService.CreateStrain.
func (c *strainsServiceClient) CreateStrain(ctx context.Context, req *connect_go.Request[v1.CreateStrainRequest]) (*connect_go.Response[v1.CreateStrainResponse], error) {
	return c.createStrain.CallUnary(ctx, req)
}

// DeleteStrain calls gardens.v1.StrainsService.DeleteStrain.
func (c *strainsServiceClient) DeleteStrain(ctx context.Context, req *connect_go.Request[v1.DeleteStrainRequest]) (*connect_go.Response[v1.DeleteStrainResponse], error) {
	return c.deleteStrain.CallUnary(ctx, req)
}

// UpdateStrain calls gardens.v1.StrainsService.UpdateStrain.
func (c *strainsServiceClient) UpdateStrain(ctx context.Context, req *connect_go.Request[v1.UpdateStrainRequest]) (*connect_go.Response[v1.UpdateStrainResponse], error) {
	return c.updateStrain.CallUnary(ctx, req)
}

// GetStrains calls gardens.v1.StrainsService.GetStrains.
func (c *strainsServiceClient) GetStrains(ctx context.Context, req *connect_go.Request[v1.GetStrainsRequest]) (*connect_go.Response[v1.GetStrainsResponse], error) {
	return c.getStrains.CallUnary(ctx, req)
}

// GetStrain calls gardens.v1.StrainsService.GetStrain.
func (c *strainsServiceClient) GetStrain(ctx context.Context, req *connect_go.Request[v1.GetStrainRequest]) (*connect_go.Response[v1.GetStrainResponse], error) {
	return c.getStrain.CallUnary(ctx, req)
}

// StrainsServiceHandler is an implementation of the gardens.v1.StrainsService service.
type StrainsServiceHandler interface {
	CreateStrain(context.Context, *connect_go.Request[v1.CreateStrainRequest]) (*connect_go.Response[v1.CreateStrainResponse], error)
	DeleteStrain(context.Context, *connect_go.Request[v1.DeleteStrainRequest]) (*connect_go.Response[v1.DeleteStrainResponse], error)
	UpdateStrain(context.Context, *connect_go.Request[v1.UpdateStrainRequest]) (*connect_go.Response[v1.UpdateStrainResponse], error)
	GetStrains(context.Context, *connect_go.Request[v1.GetStrainsRequest]) (*connect_go.Response[v1.GetStrainsResponse], error)
	GetStrain(context.Context, *connect_go.Request[v1.GetStrainRequest]) (*connect_go.Response[v1.GetStrainResponse], error)
}

// NewStrainsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStrainsServiceHandler(svc StrainsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gardens.v1.StrainsService/CreateStrain", connect_go.NewUnaryHandler(
		"/gardens.v1.StrainsService/CreateStrain",
		svc.CreateStrain,
		opts...,
	))
	mux.Handle("/gardens.v1.StrainsService/DeleteStrain", connect_go.NewUnaryHandler(
		"/gardens.v1.StrainsService/DeleteStrain",
		svc.DeleteStrain,
		opts...,
	))
	mux.Handle("/gardens.v1.StrainsService/UpdateStrain", connect_go.NewUnaryHandler(
		"/gardens.v1.StrainsService/UpdateStrain",
		svc.UpdateStrain,
		opts...,
	))
	mux.Handle("/gardens.v1.StrainsService/GetStrains", connect_go.NewUnaryHandler(
		"/gardens.v1.StrainsService/GetStrains",
		svc.GetStrains,
		opts...,
	))
	mux.Handle("/gardens.v1.StrainsService/GetStrain", connect_go.NewUnaryHandler(
		"/gardens.v1.StrainsService/GetStrain",
		svc.GetStrain,
		opts...,
	))
	return "/gardens.v1.StrainsService/", mux
}

// UnimplementedStrainsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStrainsServiceHandler struct{}

func (UnimplementedStrainsServiceHandler) CreateStrain(context.Context, *connect_go.Request[v1.CreateStrainRequest]) (*connect_go.Response[v1.CreateStrainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.StrainsService.CreateStrain is not implemented"))
}

func (UnimplementedStrainsServiceHandler) DeleteStrain(context.Context, *connect_go.Request[v1.DeleteStrainRequest]) (*connect_go.Response[v1.DeleteStrainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.StrainsService.DeleteStrain is not implemented"))
}

func (UnimplementedStrainsServiceHandler) UpdateStrain(context.Context, *connect_go.Request[v1.UpdateStrainRequest]) (*connect_go.Response[v1.UpdateStrainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.StrainsService.UpdateStrain is not implemented"))
}

func (UnimplementedStrainsServiceHandler) GetStrains(context.Context, *connect_go.Request[v1.GetStrainsRequest]) (*connect_go.Response[v1.GetStrainsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.StrainsService.GetStrains is not implemented"))
}

func (UnimplementedStrainsServiceHandler) GetStrain(context.Context, *connect_go.Request[v1.GetStrainRequest]) (*connect_go.Response[v1.GetStrainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.StrainsService.GetStrain is not implemented"))
}
