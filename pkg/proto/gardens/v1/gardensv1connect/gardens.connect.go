// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gardens/v1/gardens.proto

package gardensv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ZacharyLangley/igru-web-server/pkg/proto/gardens/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GardensServiceName is the fully-qualified name of the GardensService service.
	GardensServiceName = "gardens.v1.GardensService"
)

// GardensServiceClient is a client for the gardens.v1.GardensService service.
type GardensServiceClient interface {
	CreateGarden(context.Context, *connect_go.Request[v1.CreateGardenRequest]) (*connect_go.Response[v1.CreateGardenResponse], error)
	DeleteGarden(context.Context, *connect_go.Request[v1.DeleteGardenRequest]) (*connect_go.Response[v1.DeleteGardenResponse], error)
	UpdateGarden(context.Context, *connect_go.Request[v1.UpdateGardenRequest]) (*connect_go.Response[v1.UpdateGardenResponse], error)
	GetGardens(context.Context, *connect_go.Request[v1.GetGardensRequest]) (*connect_go.Response[v1.GetGardensResponse], error)
	GetGarden(context.Context, *connect_go.Request[v1.GetGardenRequest]) (*connect_go.Response[v1.GetGardenResponse], error)
}

// NewGardensServiceClient constructs a client for the gardens.v1.GardensService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGardensServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GardensServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gardensServiceClient{
		createGarden: connect_go.NewClient[v1.CreateGardenRequest, v1.CreateGardenResponse](
			httpClient,
			baseURL+"/gardens.v1.GardensService/CreateGarden",
			opts...,
		),
		deleteGarden: connect_go.NewClient[v1.DeleteGardenRequest, v1.DeleteGardenResponse](
			httpClient,
			baseURL+"/gardens.v1.GardensService/DeleteGarden",
			opts...,
		),
		updateGarden: connect_go.NewClient[v1.UpdateGardenRequest, v1.UpdateGardenResponse](
			httpClient,
			baseURL+"/gardens.v1.GardensService/UpdateGarden",
			opts...,
		),
		getGardens: connect_go.NewClient[v1.GetGardensRequest, v1.GetGardensResponse](
			httpClient,
			baseURL+"/gardens.v1.GardensService/GetGardens",
			opts...,
		),
		getGarden: connect_go.NewClient[v1.GetGardenRequest, v1.GetGardenResponse](
			httpClient,
			baseURL+"/gardens.v1.GardensService/GetGarden",
			opts...,
		),
	}
}

// gardensServiceClient implements GardensServiceClient.
type gardensServiceClient struct {
	createGarden *connect_go.Client[v1.CreateGardenRequest, v1.CreateGardenResponse]
	deleteGarden *connect_go.Client[v1.DeleteGardenRequest, v1.DeleteGardenResponse]
	updateGarden *connect_go.Client[v1.UpdateGardenRequest, v1.UpdateGardenResponse]
	getGardens   *connect_go.Client[v1.GetGardensRequest, v1.GetGardensResponse]
	getGarden    *connect_go.Client[v1.GetGardenRequest, v1.GetGardenResponse]
}

// CreateGarden calls gardens.v1.GardensService.CreateGarden.
func (c *gardensServiceClient) CreateGarden(ctx context.Context, req *connect_go.Request[v1.CreateGardenRequest]) (*connect_go.Response[v1.CreateGardenResponse], error) {
	return c.createGarden.CallUnary(ctx, req)
}

// DeleteGarden calls gardens.v1.GardensService.DeleteGarden.
func (c *gardensServiceClient) DeleteGarden(ctx context.Context, req *connect_go.Request[v1.DeleteGardenRequest]) (*connect_go.Response[v1.DeleteGardenResponse], error) {
	return c.deleteGarden.CallUnary(ctx, req)
}

// UpdateGarden calls gardens.v1.GardensService.UpdateGarden.
func (c *gardensServiceClient) UpdateGarden(ctx context.Context, req *connect_go.Request[v1.UpdateGardenRequest]) (*connect_go.Response[v1.UpdateGardenResponse], error) {
	return c.updateGarden.CallUnary(ctx, req)
}

// GetGardens calls gardens.v1.GardensService.GetGardens.
func (c *gardensServiceClient) GetGardens(ctx context.Context, req *connect_go.Request[v1.GetGardensRequest]) (*connect_go.Response[v1.GetGardensResponse], error) {
	return c.getGardens.CallUnary(ctx, req)
}

// GetGarden calls gardens.v1.GardensService.GetGarden.
func (c *gardensServiceClient) GetGarden(ctx context.Context, req *connect_go.Request[v1.GetGardenRequest]) (*connect_go.Response[v1.GetGardenResponse], error) {
	return c.getGarden.CallUnary(ctx, req)
}

// GardensServiceHandler is an implementation of the gardens.v1.GardensService service.
type GardensServiceHandler interface {
	CreateGarden(context.Context, *connect_go.Request[v1.CreateGardenRequest]) (*connect_go.Response[v1.CreateGardenResponse], error)
	DeleteGarden(context.Context, *connect_go.Request[v1.DeleteGardenRequest]) (*connect_go.Response[v1.DeleteGardenResponse], error)
	UpdateGarden(context.Context, *connect_go.Request[v1.UpdateGardenRequest]) (*connect_go.Response[v1.UpdateGardenResponse], error)
	GetGardens(context.Context, *connect_go.Request[v1.GetGardensRequest]) (*connect_go.Response[v1.GetGardensResponse], error)
	GetGarden(context.Context, *connect_go.Request[v1.GetGardenRequest]) (*connect_go.Response[v1.GetGardenResponse], error)
}

// NewGardensServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGardensServiceHandler(svc GardensServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gardens.v1.GardensService/CreateGarden", connect_go.NewUnaryHandler(
		"/gardens.v1.GardensService/CreateGarden",
		svc.CreateGarden,
		opts...,
	))
	mux.Handle("/gardens.v1.GardensService/DeleteGarden", connect_go.NewUnaryHandler(
		"/gardens.v1.GardensService/DeleteGarden",
		svc.DeleteGarden,
		opts...,
	))
	mux.Handle("/gardens.v1.GardensService/UpdateGarden", connect_go.NewUnaryHandler(
		"/gardens.v1.GardensService/UpdateGarden",
		svc.UpdateGarden,
		opts...,
	))
	mux.Handle("/gardens.v1.GardensService/GetGardens", connect_go.NewUnaryHandler(
		"/gardens.v1.GardensService/GetGardens",
		svc.GetGardens,
		opts...,
	))
	mux.Handle("/gardens.v1.GardensService/GetGarden", connect_go.NewUnaryHandler(
		"/gardens.v1.GardensService/GetGarden",
		svc.GetGarden,
		opts...,
	))
	return "/gardens.v1.GardensService/", mux
}

// UnimplementedGardensServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGardensServiceHandler struct{}

func (UnimplementedGardensServiceHandler) CreateGarden(context.Context, *connect_go.Request[v1.CreateGardenRequest]) (*connect_go.Response[v1.CreateGardenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.GardensService.CreateGarden is not implemented"))
}

func (UnimplementedGardensServiceHandler) DeleteGarden(context.Context, *connect_go.Request[v1.DeleteGardenRequest]) (*connect_go.Response[v1.DeleteGardenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.GardensService.DeleteGarden is not implemented"))
}

func (UnimplementedGardensServiceHandler) UpdateGarden(context.Context, *connect_go.Request[v1.UpdateGardenRequest]) (*connect_go.Response[v1.UpdateGardenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.GardensService.UpdateGarden is not implemented"))
}

func (UnimplementedGardensServiceHandler) GetGardens(context.Context, *connect_go.Request[v1.GetGardensRequest]) (*connect_go.Response[v1.GetGardensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.GardensService.GetGardens is not implemented"))
}

func (UnimplementedGardensServiceHandler) GetGarden(context.Context, *connect_go.Request[v1.GetGardenRequest]) (*connect_go.Response[v1.GetGardenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.GardensService.GetGarden is not implemented"))
}
