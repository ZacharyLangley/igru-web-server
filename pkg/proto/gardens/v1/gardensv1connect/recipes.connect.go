// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gardens/v1/recipes.proto

package gardensv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ZacharyLangley/igru-web-server/pkg/proto/gardens/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RecipesServiceName is the fully-qualified name of the RecipesService service.
	RecipesServiceName = "gardens.v1.RecipesService"
)

// RecipesServiceClient is a client for the gardens.v1.RecipesService service.
type RecipesServiceClient interface {
	CreateRecipe(context.Context, *connect_go.Request[v1.CreateRecipeRequest]) (*connect_go.Response[v1.CreateRecipeResponse], error)
	DeleteRecipe(context.Context, *connect_go.Request[v1.DeleteRecipeRequest]) (*connect_go.Response[v1.DeleteRecipeResponse], error)
	UpdateRecipe(context.Context, *connect_go.Request[v1.UpdateRecipeRequest]) (*connect_go.Response[v1.UpdateRecipeResponse], error)
	GetRecipes(context.Context, *connect_go.Request[v1.GetRecipesRequest]) (*connect_go.Response[v1.GetRecipesResponse], error)
	GetRecipe(context.Context, *connect_go.Request[v1.GetRecipeRequest]) (*connect_go.Response[v1.GetRecipeResponse], error)
}

// NewRecipesServiceClient constructs a client for the gardens.v1.RecipesService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecipesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RecipesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &recipesServiceClient{
		createRecipe: connect_go.NewClient[v1.CreateRecipeRequest, v1.CreateRecipeResponse](
			httpClient,
			baseURL+"/gardens.v1.RecipesService/CreateRecipe",
			opts...,
		),
		deleteRecipe: connect_go.NewClient[v1.DeleteRecipeRequest, v1.DeleteRecipeResponse](
			httpClient,
			baseURL+"/gardens.v1.RecipesService/DeleteRecipe",
			opts...,
		),
		updateRecipe: connect_go.NewClient[v1.UpdateRecipeRequest, v1.UpdateRecipeResponse](
			httpClient,
			baseURL+"/gardens.v1.RecipesService/UpdateRecipe",
			opts...,
		),
		getRecipes: connect_go.NewClient[v1.GetRecipesRequest, v1.GetRecipesResponse](
			httpClient,
			baseURL+"/gardens.v1.RecipesService/GetRecipes",
			opts...,
		),
		getRecipe: connect_go.NewClient[v1.GetRecipeRequest, v1.GetRecipeResponse](
			httpClient,
			baseURL+"/gardens.v1.RecipesService/GetRecipe",
			opts...,
		),
	}
}

// recipesServiceClient implements RecipesServiceClient.
type recipesServiceClient struct {
	createRecipe *connect_go.Client[v1.CreateRecipeRequest, v1.CreateRecipeResponse]
	deleteRecipe *connect_go.Client[v1.DeleteRecipeRequest, v1.DeleteRecipeResponse]
	updateRecipe *connect_go.Client[v1.UpdateRecipeRequest, v1.UpdateRecipeResponse]
	getRecipes   *connect_go.Client[v1.GetRecipesRequest, v1.GetRecipesResponse]
	getRecipe    *connect_go.Client[v1.GetRecipeRequest, v1.GetRecipeResponse]
}

// CreateRecipe calls gardens.v1.RecipesService.CreateRecipe.
func (c *recipesServiceClient) CreateRecipe(ctx context.Context, req *connect_go.Request[v1.CreateRecipeRequest]) (*connect_go.Response[v1.CreateRecipeResponse], error) {
	return c.createRecipe.CallUnary(ctx, req)
}

// DeleteRecipe calls gardens.v1.RecipesService.DeleteRecipe.
func (c *recipesServiceClient) DeleteRecipe(ctx context.Context, req *connect_go.Request[v1.DeleteRecipeRequest]) (*connect_go.Response[v1.DeleteRecipeResponse], error) {
	return c.deleteRecipe.CallUnary(ctx, req)
}

// UpdateRecipe calls gardens.v1.RecipesService.UpdateRecipe.
func (c *recipesServiceClient) UpdateRecipe(ctx context.Context, req *connect_go.Request[v1.UpdateRecipeRequest]) (*connect_go.Response[v1.UpdateRecipeResponse], error) {
	return c.updateRecipe.CallUnary(ctx, req)
}

// GetRecipes calls gardens.v1.RecipesService.GetRecipes.
func (c *recipesServiceClient) GetRecipes(ctx context.Context, req *connect_go.Request[v1.GetRecipesRequest]) (*connect_go.Response[v1.GetRecipesResponse], error) {
	return c.getRecipes.CallUnary(ctx, req)
}

// GetRecipe calls gardens.v1.RecipesService.GetRecipe.
func (c *recipesServiceClient) GetRecipe(ctx context.Context, req *connect_go.Request[v1.GetRecipeRequest]) (*connect_go.Response[v1.GetRecipeResponse], error) {
	return c.getRecipe.CallUnary(ctx, req)
}

// RecipesServiceHandler is an implementation of the gardens.v1.RecipesService service.
type RecipesServiceHandler interface {
	CreateRecipe(context.Context, *connect_go.Request[v1.CreateRecipeRequest]) (*connect_go.Response[v1.CreateRecipeResponse], error)
	DeleteRecipe(context.Context, *connect_go.Request[v1.DeleteRecipeRequest]) (*connect_go.Response[v1.DeleteRecipeResponse], error)
	UpdateRecipe(context.Context, *connect_go.Request[v1.UpdateRecipeRequest]) (*connect_go.Response[v1.UpdateRecipeResponse], error)
	GetRecipes(context.Context, *connect_go.Request[v1.GetRecipesRequest]) (*connect_go.Response[v1.GetRecipesResponse], error)
	GetRecipe(context.Context, *connect_go.Request[v1.GetRecipeRequest]) (*connect_go.Response[v1.GetRecipeResponse], error)
}

// NewRecipesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecipesServiceHandler(svc RecipesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gardens.v1.RecipesService/CreateRecipe", connect_go.NewUnaryHandler(
		"/gardens.v1.RecipesService/CreateRecipe",
		svc.CreateRecipe,
		opts...,
	))
	mux.Handle("/gardens.v1.RecipesService/DeleteRecipe", connect_go.NewUnaryHandler(
		"/gardens.v1.RecipesService/DeleteRecipe",
		svc.DeleteRecipe,
		opts...,
	))
	mux.Handle("/gardens.v1.RecipesService/UpdateRecipe", connect_go.NewUnaryHandler(
		"/gardens.v1.RecipesService/UpdateRecipe",
		svc.UpdateRecipe,
		opts...,
	))
	mux.Handle("/gardens.v1.RecipesService/GetRecipes", connect_go.NewUnaryHandler(
		"/gardens.v1.RecipesService/GetRecipes",
		svc.GetRecipes,
		opts...,
	))
	mux.Handle("/gardens.v1.RecipesService/GetRecipe", connect_go.NewUnaryHandler(
		"/gardens.v1.RecipesService/GetRecipe",
		svc.GetRecipe,
		opts...,
	))
	return "/gardens.v1.RecipesService/", mux
}

// UnimplementedRecipesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecipesServiceHandler struct{}

func (UnimplementedRecipesServiceHandler) CreateRecipe(context.Context, *connect_go.Request[v1.CreateRecipeRequest]) (*connect_go.Response[v1.CreateRecipeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.RecipesService.CreateRecipe is not implemented"))
}

func (UnimplementedRecipesServiceHandler) DeleteRecipe(context.Context, *connect_go.Request[v1.DeleteRecipeRequest]) (*connect_go.Response[v1.DeleteRecipeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.RecipesService.DeleteRecipe is not implemented"))
}

func (UnimplementedRecipesServiceHandler) UpdateRecipe(context.Context, *connect_go.Request[v1.UpdateRecipeRequest]) (*connect_go.Response[v1.UpdateRecipeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.RecipesService.UpdateRecipe is not implemented"))
}

func (UnimplementedRecipesServiceHandler) GetRecipes(context.Context, *connect_go.Request[v1.GetRecipesRequest]) (*connect_go.Response[v1.GetRecipesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.RecipesService.GetRecipes is not implemented"))
}

func (UnimplementedRecipesServiceHandler) GetRecipe(context.Context, *connect_go.Request[v1.GetRecipeRequest]) (*connect_go.Response[v1.GetRecipeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gardens.v1.RecipesService.GetRecipe is not implemented"))
}
