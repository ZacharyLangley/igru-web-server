// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: garden/v1/garden.proto

package gardenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GardenService_CreateGarden_FullMethodName = "/garden.v1.GardenService/CreateGarden"
	GardenService_DeleteGarden_FullMethodName = "/garden.v1.GardenService/DeleteGarden"
	GardenService_UpdateGarden_FullMethodName = "/garden.v1.GardenService/UpdateGarden"
	GardenService_GetGardens_FullMethodName   = "/garden.v1.GardenService/GetGardens"
	GardenService_GetGarden_FullMethodName    = "/garden.v1.GardenService/GetGarden"
)

// GardenServiceClient is the client API for GardenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GardenServiceClient interface {
	CreateGarden(ctx context.Context, in *CreateGardenRequest, opts ...grpc.CallOption) (*CreateGardenResponse, error)
	DeleteGarden(ctx context.Context, in *DeleteGardenRequest, opts ...grpc.CallOption) (*DeleteGardenResponse, error)
	UpdateGarden(ctx context.Context, in *UpdateGardenRequest, opts ...grpc.CallOption) (*UpdateGardenResponse, error)
	GetGardens(ctx context.Context, in *GetGardensRequest, opts ...grpc.CallOption) (*GetGardensResponse, error)
	GetGarden(ctx context.Context, in *GetGardenRequest, opts ...grpc.CallOption) (*GetGardenResponse, error)
}

type gardenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGardenServiceClient(cc grpc.ClientConnInterface) GardenServiceClient {
	return &gardenServiceClient{cc}
}

func (c *gardenServiceClient) CreateGarden(ctx context.Context, in *CreateGardenRequest, opts ...grpc.CallOption) (*CreateGardenResponse, error) {
	out := new(CreateGardenResponse)
	err := c.cc.Invoke(ctx, GardenService_CreateGarden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenServiceClient) DeleteGarden(ctx context.Context, in *DeleteGardenRequest, opts ...grpc.CallOption) (*DeleteGardenResponse, error) {
	out := new(DeleteGardenResponse)
	err := c.cc.Invoke(ctx, GardenService_DeleteGarden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenServiceClient) UpdateGarden(ctx context.Context, in *UpdateGardenRequest, opts ...grpc.CallOption) (*UpdateGardenResponse, error) {
	out := new(UpdateGardenResponse)
	err := c.cc.Invoke(ctx, GardenService_UpdateGarden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenServiceClient) GetGardens(ctx context.Context, in *GetGardensRequest, opts ...grpc.CallOption) (*GetGardensResponse, error) {
	out := new(GetGardensResponse)
	err := c.cc.Invoke(ctx, GardenService_GetGardens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenServiceClient) GetGarden(ctx context.Context, in *GetGardenRequest, opts ...grpc.CallOption) (*GetGardenResponse, error) {
	out := new(GetGardenResponse)
	err := c.cc.Invoke(ctx, GardenService_GetGarden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GardenServiceServer is the server API for GardenService service.
// All implementations must embed UnimplementedGardenServiceServer
// for forward compatibility
type GardenServiceServer interface {
	CreateGarden(context.Context, *CreateGardenRequest) (*CreateGardenResponse, error)
	DeleteGarden(context.Context, *DeleteGardenRequest) (*DeleteGardenResponse, error)
	UpdateGarden(context.Context, *UpdateGardenRequest) (*UpdateGardenResponse, error)
	GetGardens(context.Context, *GetGardensRequest) (*GetGardensResponse, error)
	GetGarden(context.Context, *GetGardenRequest) (*GetGardenResponse, error)
	mustEmbedUnimplementedGardenServiceServer()
}

// UnimplementedGardenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGardenServiceServer struct {
}

func (UnimplementedGardenServiceServer) CreateGarden(context.Context, *CreateGardenRequest) (*CreateGardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGarden not implemented")
}
func (UnimplementedGardenServiceServer) DeleteGarden(context.Context, *DeleteGardenRequest) (*DeleteGardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGarden not implemented")
}
func (UnimplementedGardenServiceServer) UpdateGarden(context.Context, *UpdateGardenRequest) (*UpdateGardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGarden not implemented")
}
func (UnimplementedGardenServiceServer) GetGardens(context.Context, *GetGardensRequest) (*GetGardensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGardens not implemented")
}
func (UnimplementedGardenServiceServer) GetGarden(context.Context, *GetGardenRequest) (*GetGardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGarden not implemented")
}
func (UnimplementedGardenServiceServer) mustEmbedUnimplementedGardenServiceServer() {}

// UnsafeGardenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GardenServiceServer will
// result in compilation errors.
type UnsafeGardenServiceServer interface {
	mustEmbedUnimplementedGardenServiceServer()
}

func RegisterGardenServiceServer(s grpc.ServiceRegistrar, srv GardenServiceServer) {
	s.RegisterService(&GardenService_ServiceDesc, srv)
}

func _GardenService_CreateGarden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGardenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenServiceServer).CreateGarden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenService_CreateGarden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenServiceServer).CreateGarden(ctx, req.(*CreateGardenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenService_DeleteGarden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGardenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenServiceServer).DeleteGarden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenService_DeleteGarden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenServiceServer).DeleteGarden(ctx, req.(*DeleteGardenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenService_UpdateGarden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGardenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenServiceServer).UpdateGarden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenService_UpdateGarden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenServiceServer).UpdateGarden(ctx, req.(*UpdateGardenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenService_GetGardens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGardensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenServiceServer).GetGardens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenService_GetGardens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenServiceServer).GetGardens(ctx, req.(*GetGardensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenService_GetGarden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGardenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenServiceServer).GetGarden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenService_GetGarden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenServiceServer).GetGarden(ctx, req.(*GetGardenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GardenService_ServiceDesc is the grpc.ServiceDesc for GardenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GardenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "garden.v1.GardenService",
	HandlerType: (*GardenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGarden",
			Handler:    _GardenService_CreateGarden_Handler,
		},
		{
			MethodName: "DeleteGarden",
			Handler:    _GardenService_DeleteGarden_Handler,
		},
		{
			MethodName: "UpdateGarden",
			Handler:    _GardenService_UpdateGarden_Handler,
		},
		{
			MethodName: "GetGardens",
			Handler:    _GardenService_GetGardens_Handler,
		},
		{
			MethodName: "GetGarden",
			Handler:    _GardenService_GetGarden_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "garden/v1/garden.proto",
}
