// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: garden/v1/garden.proto

package gardenv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ZacharyLangley/igru-web-server/pkg/proto/garden/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GardenServiceName is the fully-qualified name of the GardenService service.
	GardenServiceName = "garden.v1.GardenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GardenServiceCreateGardenProcedure is the fully-qualified name of the GardenService's
	// CreateGarden RPC.
	GardenServiceCreateGardenProcedure = "/garden.v1.GardenService/CreateGarden"
	// GardenServiceDeleteGardenProcedure is the fully-qualified name of the GardenService's
	// DeleteGarden RPC.
	GardenServiceDeleteGardenProcedure = "/garden.v1.GardenService/DeleteGarden"
	// GardenServiceUpdateGardenProcedure is the fully-qualified name of the GardenService's
	// UpdateGarden RPC.
	GardenServiceUpdateGardenProcedure = "/garden.v1.GardenService/UpdateGarden"
	// GardenServiceGetGardensProcedure is the fully-qualified name of the GardenService's GetGardens
	// RPC.
	GardenServiceGetGardensProcedure = "/garden.v1.GardenService/GetGardens"
	// GardenServiceGetGardenProcedure is the fully-qualified name of the GardenService's GetGarden RPC.
	GardenServiceGetGardenProcedure = "/garden.v1.GardenService/GetGarden"
)

// GardenServiceClient is a client for the garden.v1.GardenService service.
type GardenServiceClient interface {
	CreateGarden(context.Context, *connect_go.Request[v1.CreateGardenRequest]) (*connect_go.Response[v1.CreateGardenResponse], error)
	DeleteGarden(context.Context, *connect_go.Request[v1.DeleteGardenRequest]) (*connect_go.Response[v1.DeleteGardenResponse], error)
	UpdateGarden(context.Context, *connect_go.Request[v1.UpdateGardenRequest]) (*connect_go.Response[v1.UpdateGardenResponse], error)
	GetGardens(context.Context, *connect_go.Request[v1.GetGardensRequest]) (*connect_go.Response[v1.GetGardensResponse], error)
	GetGarden(context.Context, *connect_go.Request[v1.GetGardenRequest]) (*connect_go.Response[v1.GetGardenResponse], error)
}

// NewGardenServiceClient constructs a client for the garden.v1.GardenService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGardenServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GardenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gardenServiceClient{
		createGarden: connect_go.NewClient[v1.CreateGardenRequest, v1.CreateGardenResponse](
			httpClient,
			baseURL+GardenServiceCreateGardenProcedure,
			opts...,
		),
		deleteGarden: connect_go.NewClient[v1.DeleteGardenRequest, v1.DeleteGardenResponse](
			httpClient,
			baseURL+GardenServiceDeleteGardenProcedure,
			opts...,
		),
		updateGarden: connect_go.NewClient[v1.UpdateGardenRequest, v1.UpdateGardenResponse](
			httpClient,
			baseURL+GardenServiceUpdateGardenProcedure,
			opts...,
		),
		getGardens: connect_go.NewClient[v1.GetGardensRequest, v1.GetGardensResponse](
			httpClient,
			baseURL+GardenServiceGetGardensProcedure,
			opts...,
		),
		getGarden: connect_go.NewClient[v1.GetGardenRequest, v1.GetGardenResponse](
			httpClient,
			baseURL+GardenServiceGetGardenProcedure,
			opts...,
		),
	}
}

// gardenServiceClient implements GardenServiceClient.
type gardenServiceClient struct {
	createGarden *connect_go.Client[v1.CreateGardenRequest, v1.CreateGardenResponse]
	deleteGarden *connect_go.Client[v1.DeleteGardenRequest, v1.DeleteGardenResponse]
	updateGarden *connect_go.Client[v1.UpdateGardenRequest, v1.UpdateGardenResponse]
	getGardens   *connect_go.Client[v1.GetGardensRequest, v1.GetGardensResponse]
	getGarden    *connect_go.Client[v1.GetGardenRequest, v1.GetGardenResponse]
}

// CreateGarden calls garden.v1.GardenService.CreateGarden.
func (c *gardenServiceClient) CreateGarden(ctx context.Context, req *connect_go.Request[v1.CreateGardenRequest]) (*connect_go.Response[v1.CreateGardenResponse], error) {
	return c.createGarden.CallUnary(ctx, req)
}

// DeleteGarden calls garden.v1.GardenService.DeleteGarden.
func (c *gardenServiceClient) DeleteGarden(ctx context.Context, req *connect_go.Request[v1.DeleteGardenRequest]) (*connect_go.Response[v1.DeleteGardenResponse], error) {
	return c.deleteGarden.CallUnary(ctx, req)
}

// UpdateGarden calls garden.v1.GardenService.UpdateGarden.
func (c *gardenServiceClient) UpdateGarden(ctx context.Context, req *connect_go.Request[v1.UpdateGardenRequest]) (*connect_go.Response[v1.UpdateGardenResponse], error) {
	return c.updateGarden.CallUnary(ctx, req)
}

// GetGardens calls garden.v1.GardenService.GetGardens.
func (c *gardenServiceClient) GetGardens(ctx context.Context, req *connect_go.Request[v1.GetGardensRequest]) (*connect_go.Response[v1.GetGardensResponse], error) {
	return c.getGardens.CallUnary(ctx, req)
}

// GetGarden calls garden.v1.GardenService.GetGarden.
func (c *gardenServiceClient) GetGarden(ctx context.Context, req *connect_go.Request[v1.GetGardenRequest]) (*connect_go.Response[v1.GetGardenResponse], error) {
	return c.getGarden.CallUnary(ctx, req)
}

// GardenServiceHandler is an implementation of the garden.v1.GardenService service.
type GardenServiceHandler interface {
	CreateGarden(context.Context, *connect_go.Request[v1.CreateGardenRequest]) (*connect_go.Response[v1.CreateGardenResponse], error)
	DeleteGarden(context.Context, *connect_go.Request[v1.DeleteGardenRequest]) (*connect_go.Response[v1.DeleteGardenResponse], error)
	UpdateGarden(context.Context, *connect_go.Request[v1.UpdateGardenRequest]) (*connect_go.Response[v1.UpdateGardenResponse], error)
	GetGardens(context.Context, *connect_go.Request[v1.GetGardensRequest]) (*connect_go.Response[v1.GetGardensResponse], error)
	GetGarden(context.Context, *connect_go.Request[v1.GetGardenRequest]) (*connect_go.Response[v1.GetGardenResponse], error)
}

// NewGardenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGardenServiceHandler(svc GardenServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(GardenServiceCreateGardenProcedure, connect_go.NewUnaryHandler(
		GardenServiceCreateGardenProcedure,
		svc.CreateGarden,
		opts...,
	))
	mux.Handle(GardenServiceDeleteGardenProcedure, connect_go.NewUnaryHandler(
		GardenServiceDeleteGardenProcedure,
		svc.DeleteGarden,
		opts...,
	))
	mux.Handle(GardenServiceUpdateGardenProcedure, connect_go.NewUnaryHandler(
		GardenServiceUpdateGardenProcedure,
		svc.UpdateGarden,
		opts...,
	))
	mux.Handle(GardenServiceGetGardensProcedure, connect_go.NewUnaryHandler(
		GardenServiceGetGardensProcedure,
		svc.GetGardens,
		opts...,
	))
	mux.Handle(GardenServiceGetGardenProcedure, connect_go.NewUnaryHandler(
		GardenServiceGetGardenProcedure,
		svc.GetGarden,
		opts...,
	))
	return "/garden.v1.GardenService/", mux
}

// UnimplementedGardenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGardenServiceHandler struct{}

func (UnimplementedGardenServiceHandler) CreateGarden(context.Context, *connect_go.Request[v1.CreateGardenRequest]) (*connect_go.Response[v1.CreateGardenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("garden.v1.GardenService.CreateGarden is not implemented"))
}

func (UnimplementedGardenServiceHandler) DeleteGarden(context.Context, *connect_go.Request[v1.DeleteGardenRequest]) (*connect_go.Response[v1.DeleteGardenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("garden.v1.GardenService.DeleteGarden is not implemented"))
}

func (UnimplementedGardenServiceHandler) UpdateGarden(context.Context, *connect_go.Request[v1.UpdateGardenRequest]) (*connect_go.Response[v1.UpdateGardenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("garden.v1.GardenService.UpdateGarden is not implemented"))
}

func (UnimplementedGardenServiceHandler) GetGardens(context.Context, *connect_go.Request[v1.GetGardensRequest]) (*connect_go.Response[v1.GetGardensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("garden.v1.GardenService.GetGardens is not implemented"))
}

func (UnimplementedGardenServiceHandler) GetGarden(context.Context, *connect_go.Request[v1.GetGardenRequest]) (*connect_go.Response[v1.GetGardenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("garden.v1.GardenService.GetGarden is not implemented"))
}
