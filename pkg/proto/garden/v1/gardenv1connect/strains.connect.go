// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: garden/v1/strains.proto

package gardenv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ZacharyLangley/igru-web-server/pkg/proto/garden/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StrainServiceName is the fully-qualified name of the StrainService service.
	StrainServiceName = "garden.v1.StrainService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StrainServiceCreateStrainProcedure is the fully-qualified name of the StrainService's
	// CreateStrain RPC.
	StrainServiceCreateStrainProcedure = "/garden.v1.StrainService/CreateStrain"
	// StrainServiceDeleteStrainProcedure is the fully-qualified name of the StrainService's
	// DeleteStrain RPC.
	StrainServiceDeleteStrainProcedure = "/garden.v1.StrainService/DeleteStrain"
	// StrainServiceUpdateStrainProcedure is the fully-qualified name of the StrainService's
	// UpdateStrain RPC.
	StrainServiceUpdateStrainProcedure = "/garden.v1.StrainService/UpdateStrain"
	// StrainServiceGetStrainsProcedure is the fully-qualified name of the StrainService's GetStrains
	// RPC.
	StrainServiceGetStrainsProcedure = "/garden.v1.StrainService/GetStrains"
	// StrainServiceGetStrainProcedure is the fully-qualified name of the StrainService's GetStrain RPC.
	StrainServiceGetStrainProcedure = "/garden.v1.StrainService/GetStrain"
)

// StrainServiceClient is a client for the garden.v1.StrainService service.
type StrainServiceClient interface {
	CreateStrain(context.Context, *connect_go.Request[v1.CreateStrainRequest]) (*connect_go.Response[v1.CreateStrainResponse], error)
	DeleteStrain(context.Context, *connect_go.Request[v1.DeleteStrainRequest]) (*connect_go.Response[v1.DeleteStrainResponse], error)
	UpdateStrain(context.Context, *connect_go.Request[v1.UpdateStrainRequest]) (*connect_go.Response[v1.UpdateStrainResponse], error)
	GetStrains(context.Context, *connect_go.Request[v1.GetStrainsRequest]) (*connect_go.Response[v1.GetStrainsResponse], error)
	GetStrain(context.Context, *connect_go.Request[v1.GetStrainRequest]) (*connect_go.Response[v1.GetStrainResponse], error)
}

// NewStrainServiceClient constructs a client for the garden.v1.StrainService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStrainServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StrainServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &strainServiceClient{
		createStrain: connect_go.NewClient[v1.CreateStrainRequest, v1.CreateStrainResponse](
			httpClient,
			baseURL+StrainServiceCreateStrainProcedure,
			opts...,
		),
		deleteStrain: connect_go.NewClient[v1.DeleteStrainRequest, v1.DeleteStrainResponse](
			httpClient,
			baseURL+StrainServiceDeleteStrainProcedure,
			opts...,
		),
		updateStrain: connect_go.NewClient[v1.UpdateStrainRequest, v1.UpdateStrainResponse](
			httpClient,
			baseURL+StrainServiceUpdateStrainProcedure,
			opts...,
		),
		getStrains: connect_go.NewClient[v1.GetStrainsRequest, v1.GetStrainsResponse](
			httpClient,
			baseURL+StrainServiceGetStrainsProcedure,
			opts...,
		),
		getStrain: connect_go.NewClient[v1.GetStrainRequest, v1.GetStrainResponse](
			httpClient,
			baseURL+StrainServiceGetStrainProcedure,
			opts...,
		),
	}
}

// strainServiceClient implements StrainServiceClient.
type strainServiceClient struct {
	createStrain *connect_go.Client[v1.CreateStrainRequest, v1.CreateStrainResponse]
	deleteStrain *connect_go.Client[v1.DeleteStrainRequest, v1.DeleteStrainResponse]
	updateStrain *connect_go.Client[v1.UpdateStrainRequest, v1.UpdateStrainResponse]
	getStrains   *connect_go.Client[v1.GetStrainsRequest, v1.GetStrainsResponse]
	getStrain    *connect_go.Client[v1.GetStrainRequest, v1.GetStrainResponse]
}

// CreateStrain calls garden.v1.StrainService.CreateStrain.
func (c *strainServiceClient) CreateStrain(ctx context.Context, req *connect_go.Request[v1.CreateStrainRequest]) (*connect_go.Response[v1.CreateStrainResponse], error) {
	return c.createStrain.CallUnary(ctx, req)
}

// DeleteStrain calls garden.v1.StrainService.DeleteStrain.
func (c *strainServiceClient) DeleteStrain(ctx context.Context, req *connect_go.Request[v1.DeleteStrainRequest]) (*connect_go.Response[v1.DeleteStrainResponse], error) {
	return c.deleteStrain.CallUnary(ctx, req)
}

// UpdateStrain calls garden.v1.StrainService.UpdateStrain.
func (c *strainServiceClient) UpdateStrain(ctx context.Context, req *connect_go.Request[v1.UpdateStrainRequest]) (*connect_go.Response[v1.UpdateStrainResponse], error) {
	return c.updateStrain.CallUnary(ctx, req)
}

// GetStrains calls garden.v1.StrainService.GetStrains.
func (c *strainServiceClient) GetStrains(ctx context.Context, req *connect_go.Request[v1.GetStrainsRequest]) (*connect_go.Response[v1.GetStrainsResponse], error) {
	return c.getStrains.CallUnary(ctx, req)
}

// GetStrain calls garden.v1.StrainService.GetStrain.
func (c *strainServiceClient) GetStrain(ctx context.Context, req *connect_go.Request[v1.GetStrainRequest]) (*connect_go.Response[v1.GetStrainResponse], error) {
	return c.getStrain.CallUnary(ctx, req)
}

// StrainServiceHandler is an implementation of the garden.v1.StrainService service.
type StrainServiceHandler interface {
	CreateStrain(context.Context, *connect_go.Request[v1.CreateStrainRequest]) (*connect_go.Response[v1.CreateStrainResponse], error)
	DeleteStrain(context.Context, *connect_go.Request[v1.DeleteStrainRequest]) (*connect_go.Response[v1.DeleteStrainResponse], error)
	UpdateStrain(context.Context, *connect_go.Request[v1.UpdateStrainRequest]) (*connect_go.Response[v1.UpdateStrainResponse], error)
	GetStrains(context.Context, *connect_go.Request[v1.GetStrainsRequest]) (*connect_go.Response[v1.GetStrainsResponse], error)
	GetStrain(context.Context, *connect_go.Request[v1.GetStrainRequest]) (*connect_go.Response[v1.GetStrainResponse], error)
}

// NewStrainServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStrainServiceHandler(svc StrainServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(StrainServiceCreateStrainProcedure, connect_go.NewUnaryHandler(
		StrainServiceCreateStrainProcedure,
		svc.CreateStrain,
		opts...,
	))
	mux.Handle(StrainServiceDeleteStrainProcedure, connect_go.NewUnaryHandler(
		StrainServiceDeleteStrainProcedure,
		svc.DeleteStrain,
		opts...,
	))
	mux.Handle(StrainServiceUpdateStrainProcedure, connect_go.NewUnaryHandler(
		StrainServiceUpdateStrainProcedure,
		svc.UpdateStrain,
		opts...,
	))
	mux.Handle(StrainServiceGetStrainsProcedure, connect_go.NewUnaryHandler(
		StrainServiceGetStrainsProcedure,
		svc.GetStrains,
		opts...,
	))
	mux.Handle(StrainServiceGetStrainProcedure, connect_go.NewUnaryHandler(
		StrainServiceGetStrainProcedure,
		svc.GetStrain,
		opts...,
	))
	return "/garden.v1.StrainService/", mux
}

// UnimplementedStrainServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStrainServiceHandler struct{}

func (UnimplementedStrainServiceHandler) CreateStrain(context.Context, *connect_go.Request[v1.CreateStrainRequest]) (*connect_go.Response[v1.CreateStrainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("garden.v1.StrainService.CreateStrain is not implemented"))
}

func (UnimplementedStrainServiceHandler) DeleteStrain(context.Context, *connect_go.Request[v1.DeleteStrainRequest]) (*connect_go.Response[v1.DeleteStrainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("garden.v1.StrainService.DeleteStrain is not implemented"))
}

func (UnimplementedStrainServiceHandler) UpdateStrain(context.Context, *connect_go.Request[v1.UpdateStrainRequest]) (*connect_go.Response[v1.UpdateStrainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("garden.v1.StrainService.UpdateStrain is not implemented"))
}

func (UnimplementedStrainServiceHandler) GetStrains(context.Context, *connect_go.Request[v1.GetStrainsRequest]) (*connect_go.Response[v1.GetStrainsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("garden.v1.StrainService.GetStrains is not implemented"))
}

func (UnimplementedStrainServiceHandler) GetStrain(context.Context, *connect_go.Request[v1.GetStrainRequest]) (*connect_go.Response[v1.GetStrainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("garden.v1.StrainService.GetStrain is not implemented"))
}
