// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authentication/v1/group.proto

package authenticationv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ZacharyLangley/igru-web-server/pkg/proto/authentication/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GroupServiceName is the fully-qualified name of the GroupService service.
	GroupServiceName = "authentication.v1.GroupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GroupServiceCreateGroupProcedure is the fully-qualified name of the GroupService's CreateGroup
	// RPC.
	GroupServiceCreateGroupProcedure = "/authentication.v1.GroupService/CreateGroup"
	// GroupServiceUpdateGroupProcedure is the fully-qualified name of the GroupService's UpdateGroup
	// RPC.
	GroupServiceUpdateGroupProcedure = "/authentication.v1.GroupService/UpdateGroup"
	// GroupServiceDeleteGroupProcedure is the fully-qualified name of the GroupService's DeleteGroup
	// RPC.
	GroupServiceDeleteGroupProcedure = "/authentication.v1.GroupService/DeleteGroup"
	// GroupServiceGetGroupProcedure is the fully-qualified name of the GroupService's GetGroup RPC.
	GroupServiceGetGroupProcedure = "/authentication.v1.GroupService/GetGroup"
	// GroupServiceGetGroupsProcedure is the fully-qualified name of the GroupService's GetGroups RPC.
	GroupServiceGetGroupsProcedure = "/authentication.v1.GroupService/GetGroups"
	// GroupServiceAddGroupMemberProcedure is the fully-qualified name of the GroupService's
	// AddGroupMember RPC.
	GroupServiceAddGroupMemberProcedure = "/authentication.v1.GroupService/AddGroupMember"
	// GroupServiceUpdateGroupMemberProcedure is the fully-qualified name of the GroupService's
	// UpdateGroupMember RPC.
	GroupServiceUpdateGroupMemberProcedure = "/authentication.v1.GroupService/UpdateGroupMember"
	// GroupServiceRemoveGroupMemberProcedure is the fully-qualified name of the GroupService's
	// RemoveGroupMember RPC.
	GroupServiceRemoveGroupMemberProcedure = "/authentication.v1.GroupService/RemoveGroupMember"
	// GroupServiceGetGroupMembersProcedure is the fully-qualified name of the GroupService's
	// GetGroupMembers RPC.
	GroupServiceGetGroupMembersProcedure = "/authentication.v1.GroupService/GetGroupMembers"
	// GroupServiceGetUserGroupsProcedure is the fully-qualified name of the GroupService's
	// GetUserGroups RPC.
	GroupServiceGetUserGroupsProcedure = "/authentication.v1.GroupService/GetUserGroups"
)

// GroupServiceClient is a client for the authentication.v1.GroupService service.
type GroupServiceClient interface {
	CreateGroup(context.Context, *connect_go.Request[v1.CreateGroupRequest]) (*connect_go.Response[v1.CreateGroupResponse], error)
	UpdateGroup(context.Context, *connect_go.Request[v1.UpdateGroupRequest]) (*connect_go.Response[v1.UpdateGroupResponse], error)
	DeleteGroup(context.Context, *connect_go.Request[v1.DeleteGroupRequest]) (*connect_go.Response[v1.DeleteGroupResponse], error)
	GetGroup(context.Context, *connect_go.Request[v1.GetGroupRequest]) (*connect_go.Response[v1.GetGroupResponse], error)
	GetGroups(context.Context, *connect_go.Request[v1.GetGroupsRequest]) (*connect_go.Response[v1.GetGroupsResponse], error)
	AddGroupMember(context.Context, *connect_go.Request[v1.AddGroupMemberRequest]) (*connect_go.Response[v1.AddGroupMemberResponse], error)
	UpdateGroupMember(context.Context, *connect_go.Request[v1.UpdateGroupMemberRequest]) (*connect_go.Response[v1.UpdateGroupMemberResponse], error)
	RemoveGroupMember(context.Context, *connect_go.Request[v1.RemoveGroupMemberRequest]) (*connect_go.Response[v1.RemoveGroupMemberResponse], error)
	GetGroupMembers(context.Context, *connect_go.Request[v1.GetGroupMembersRequest]) (*connect_go.Response[v1.GetGroupMembersResponse], error)
	GetUserGroups(context.Context, *connect_go.Request[v1.GetUserGroupsRequest]) (*connect_go.Response[v1.GetUserGroupsResponse], error)
}

// NewGroupServiceClient constructs a client for the authentication.v1.GroupService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGroupServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GroupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &groupServiceClient{
		createGroup: connect_go.NewClient[v1.CreateGroupRequest, v1.CreateGroupResponse](
			httpClient,
			baseURL+GroupServiceCreateGroupProcedure,
			opts...,
		),
		updateGroup: connect_go.NewClient[v1.UpdateGroupRequest, v1.UpdateGroupResponse](
			httpClient,
			baseURL+GroupServiceUpdateGroupProcedure,
			opts...,
		),
		deleteGroup: connect_go.NewClient[v1.DeleteGroupRequest, v1.DeleteGroupResponse](
			httpClient,
			baseURL+GroupServiceDeleteGroupProcedure,
			opts...,
		),
		getGroup: connect_go.NewClient[v1.GetGroupRequest, v1.GetGroupResponse](
			httpClient,
			baseURL+GroupServiceGetGroupProcedure,
			opts...,
		),
		getGroups: connect_go.NewClient[v1.GetGroupsRequest, v1.GetGroupsResponse](
			httpClient,
			baseURL+GroupServiceGetGroupsProcedure,
			opts...,
		),
		addGroupMember: connect_go.NewClient[v1.AddGroupMemberRequest, v1.AddGroupMemberResponse](
			httpClient,
			baseURL+GroupServiceAddGroupMemberProcedure,
			opts...,
		),
		updateGroupMember: connect_go.NewClient[v1.UpdateGroupMemberRequest, v1.UpdateGroupMemberResponse](
			httpClient,
			baseURL+GroupServiceUpdateGroupMemberProcedure,
			opts...,
		),
		removeGroupMember: connect_go.NewClient[v1.RemoveGroupMemberRequest, v1.RemoveGroupMemberResponse](
			httpClient,
			baseURL+GroupServiceRemoveGroupMemberProcedure,
			opts...,
		),
		getGroupMembers: connect_go.NewClient[v1.GetGroupMembersRequest, v1.GetGroupMembersResponse](
			httpClient,
			baseURL+GroupServiceGetGroupMembersProcedure,
			opts...,
		),
		getUserGroups: connect_go.NewClient[v1.GetUserGroupsRequest, v1.GetUserGroupsResponse](
			httpClient,
			baseURL+GroupServiceGetUserGroupsProcedure,
			opts...,
		),
	}
}

// groupServiceClient implements GroupServiceClient.
type groupServiceClient struct {
	createGroup       *connect_go.Client[v1.CreateGroupRequest, v1.CreateGroupResponse]
	updateGroup       *connect_go.Client[v1.UpdateGroupRequest, v1.UpdateGroupResponse]
	deleteGroup       *connect_go.Client[v1.DeleteGroupRequest, v1.DeleteGroupResponse]
	getGroup          *connect_go.Client[v1.GetGroupRequest, v1.GetGroupResponse]
	getGroups         *connect_go.Client[v1.GetGroupsRequest, v1.GetGroupsResponse]
	addGroupMember    *connect_go.Client[v1.AddGroupMemberRequest, v1.AddGroupMemberResponse]
	updateGroupMember *connect_go.Client[v1.UpdateGroupMemberRequest, v1.UpdateGroupMemberResponse]
	removeGroupMember *connect_go.Client[v1.RemoveGroupMemberRequest, v1.RemoveGroupMemberResponse]
	getGroupMembers   *connect_go.Client[v1.GetGroupMembersRequest, v1.GetGroupMembersResponse]
	getUserGroups     *connect_go.Client[v1.GetUserGroupsRequest, v1.GetUserGroupsResponse]
}

// CreateGroup calls authentication.v1.GroupService.CreateGroup.
func (c *groupServiceClient) CreateGroup(ctx context.Context, req *connect_go.Request[v1.CreateGroupRequest]) (*connect_go.Response[v1.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// UpdateGroup calls authentication.v1.GroupService.UpdateGroup.
func (c *groupServiceClient) UpdateGroup(ctx context.Context, req *connect_go.Request[v1.UpdateGroupRequest]) (*connect_go.Response[v1.UpdateGroupResponse], error) {
	return c.updateGroup.CallUnary(ctx, req)
}

// DeleteGroup calls authentication.v1.GroupService.DeleteGroup.
func (c *groupServiceClient) DeleteGroup(ctx context.Context, req *connect_go.Request[v1.DeleteGroupRequest]) (*connect_go.Response[v1.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// GetGroup calls authentication.v1.GroupService.GetGroup.
func (c *groupServiceClient) GetGroup(ctx context.Context, req *connect_go.Request[v1.GetGroupRequest]) (*connect_go.Response[v1.GetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// GetGroups calls authentication.v1.GroupService.GetGroups.
func (c *groupServiceClient) GetGroups(ctx context.Context, req *connect_go.Request[v1.GetGroupsRequest]) (*connect_go.Response[v1.GetGroupsResponse], error) {
	return c.getGroups.CallUnary(ctx, req)
}

// AddGroupMember calls authentication.v1.GroupService.AddGroupMember.
func (c *groupServiceClient) AddGroupMember(ctx context.Context, req *connect_go.Request[v1.AddGroupMemberRequest]) (*connect_go.Response[v1.AddGroupMemberResponse], error) {
	return c.addGroupMember.CallUnary(ctx, req)
}

// UpdateGroupMember calls authentication.v1.GroupService.UpdateGroupMember.
func (c *groupServiceClient) UpdateGroupMember(ctx context.Context, req *connect_go.Request[v1.UpdateGroupMemberRequest]) (*connect_go.Response[v1.UpdateGroupMemberResponse], error) {
	return c.updateGroupMember.CallUnary(ctx, req)
}

// RemoveGroupMember calls authentication.v1.GroupService.RemoveGroupMember.
func (c *groupServiceClient) RemoveGroupMember(ctx context.Context, req *connect_go.Request[v1.RemoveGroupMemberRequest]) (*connect_go.Response[v1.RemoveGroupMemberResponse], error) {
	return c.removeGroupMember.CallUnary(ctx, req)
}

// GetGroupMembers calls authentication.v1.GroupService.GetGroupMembers.
func (c *groupServiceClient) GetGroupMembers(ctx context.Context, req *connect_go.Request[v1.GetGroupMembersRequest]) (*connect_go.Response[v1.GetGroupMembersResponse], error) {
	return c.getGroupMembers.CallUnary(ctx, req)
}

// GetUserGroups calls authentication.v1.GroupService.GetUserGroups.
func (c *groupServiceClient) GetUserGroups(ctx context.Context, req *connect_go.Request[v1.GetUserGroupsRequest]) (*connect_go.Response[v1.GetUserGroupsResponse], error) {
	return c.getUserGroups.CallUnary(ctx, req)
}

// GroupServiceHandler is an implementation of the authentication.v1.GroupService service.
type GroupServiceHandler interface {
	CreateGroup(context.Context, *connect_go.Request[v1.CreateGroupRequest]) (*connect_go.Response[v1.CreateGroupResponse], error)
	UpdateGroup(context.Context, *connect_go.Request[v1.UpdateGroupRequest]) (*connect_go.Response[v1.UpdateGroupResponse], error)
	DeleteGroup(context.Context, *connect_go.Request[v1.DeleteGroupRequest]) (*connect_go.Response[v1.DeleteGroupResponse], error)
	GetGroup(context.Context, *connect_go.Request[v1.GetGroupRequest]) (*connect_go.Response[v1.GetGroupResponse], error)
	GetGroups(context.Context, *connect_go.Request[v1.GetGroupsRequest]) (*connect_go.Response[v1.GetGroupsResponse], error)
	AddGroupMember(context.Context, *connect_go.Request[v1.AddGroupMemberRequest]) (*connect_go.Response[v1.AddGroupMemberResponse], error)
	UpdateGroupMember(context.Context, *connect_go.Request[v1.UpdateGroupMemberRequest]) (*connect_go.Response[v1.UpdateGroupMemberResponse], error)
	RemoveGroupMember(context.Context, *connect_go.Request[v1.RemoveGroupMemberRequest]) (*connect_go.Response[v1.RemoveGroupMemberResponse], error)
	GetGroupMembers(context.Context, *connect_go.Request[v1.GetGroupMembersRequest]) (*connect_go.Response[v1.GetGroupMembersResponse], error)
	GetUserGroups(context.Context, *connect_go.Request[v1.GetUserGroupsRequest]) (*connect_go.Response[v1.GetUserGroupsResponse], error)
}

// NewGroupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGroupServiceHandler(svc GroupServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(GroupServiceCreateGroupProcedure, connect_go.NewUnaryHandler(
		GroupServiceCreateGroupProcedure,
		svc.CreateGroup,
		opts...,
	))
	mux.Handle(GroupServiceUpdateGroupProcedure, connect_go.NewUnaryHandler(
		GroupServiceUpdateGroupProcedure,
		svc.UpdateGroup,
		opts...,
	))
	mux.Handle(GroupServiceDeleteGroupProcedure, connect_go.NewUnaryHandler(
		GroupServiceDeleteGroupProcedure,
		svc.DeleteGroup,
		opts...,
	))
	mux.Handle(GroupServiceGetGroupProcedure, connect_go.NewUnaryHandler(
		GroupServiceGetGroupProcedure,
		svc.GetGroup,
		opts...,
	))
	mux.Handle(GroupServiceGetGroupsProcedure, connect_go.NewUnaryHandler(
		GroupServiceGetGroupsProcedure,
		svc.GetGroups,
		opts...,
	))
	mux.Handle(GroupServiceAddGroupMemberProcedure, connect_go.NewUnaryHandler(
		GroupServiceAddGroupMemberProcedure,
		svc.AddGroupMember,
		opts...,
	))
	mux.Handle(GroupServiceUpdateGroupMemberProcedure, connect_go.NewUnaryHandler(
		GroupServiceUpdateGroupMemberProcedure,
		svc.UpdateGroupMember,
		opts...,
	))
	mux.Handle(GroupServiceRemoveGroupMemberProcedure, connect_go.NewUnaryHandler(
		GroupServiceRemoveGroupMemberProcedure,
		svc.RemoveGroupMember,
		opts...,
	))
	mux.Handle(GroupServiceGetGroupMembersProcedure, connect_go.NewUnaryHandler(
		GroupServiceGetGroupMembersProcedure,
		svc.GetGroupMembers,
		opts...,
	))
	mux.Handle(GroupServiceGetUserGroupsProcedure, connect_go.NewUnaryHandler(
		GroupServiceGetUserGroupsProcedure,
		svc.GetUserGroups,
		opts...,
	))
	return "/authentication.v1.GroupService/", mux
}

// UnimplementedGroupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGroupServiceHandler struct{}

func (UnimplementedGroupServiceHandler) CreateGroup(context.Context, *connect_go.Request[v1.CreateGroupRequest]) (*connect_go.Response[v1.CreateGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.GroupService.CreateGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) UpdateGroup(context.Context, *connect_go.Request[v1.UpdateGroupRequest]) (*connect_go.Response[v1.UpdateGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.GroupService.UpdateGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) DeleteGroup(context.Context, *connect_go.Request[v1.DeleteGroupRequest]) (*connect_go.Response[v1.DeleteGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.GroupService.DeleteGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) GetGroup(context.Context, *connect_go.Request[v1.GetGroupRequest]) (*connect_go.Response[v1.GetGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.GroupService.GetGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) GetGroups(context.Context, *connect_go.Request[v1.GetGroupsRequest]) (*connect_go.Response[v1.GetGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.GroupService.GetGroups is not implemented"))
}

func (UnimplementedGroupServiceHandler) AddGroupMember(context.Context, *connect_go.Request[v1.AddGroupMemberRequest]) (*connect_go.Response[v1.AddGroupMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.GroupService.AddGroupMember is not implemented"))
}

func (UnimplementedGroupServiceHandler) UpdateGroupMember(context.Context, *connect_go.Request[v1.UpdateGroupMemberRequest]) (*connect_go.Response[v1.UpdateGroupMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.GroupService.UpdateGroupMember is not implemented"))
}

func (UnimplementedGroupServiceHandler) RemoveGroupMember(context.Context, *connect_go.Request[v1.RemoveGroupMemberRequest]) (*connect_go.Response[v1.RemoveGroupMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.GroupService.RemoveGroupMember is not implemented"))
}

func (UnimplementedGroupServiceHandler) GetGroupMembers(context.Context, *connect_go.Request[v1.GetGroupMembersRequest]) (*connect_go.Response[v1.GetGroupMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.GroupService.GetGroupMembers is not implemented"))
}

func (UnimplementedGroupServiceHandler) GetUserGroups(context.Context, *connect_go.Request[v1.GetUserGroupsRequest]) (*connect_go.Response[v1.GetUserGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.GroupService.GetUserGroups is not implemented"))
}
