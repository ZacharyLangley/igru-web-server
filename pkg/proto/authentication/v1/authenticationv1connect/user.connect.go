// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authentication/v1/user.proto

package authenticationv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ZacharyLangley/igru-web-server/pkg/proto/authentication/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "authentication.v1.UserService"
)

// UserServiceClient is a client for the authentication.v1.UserService service.
type UserServiceClient interface {
	Authenticate(context.Context, *connect_go.Request[v1.AuthenticateRequest]) (*connect_go.Response[v1.AuthenticateResponse], error)
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	Whoami(context.Context, *connect_go.Request[v1.WhoamiRequest]) (*connect_go.Response[v1.WhoamiResponse], error)
}

// NewUserServiceClient constructs a client for the authentication.v1.UserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		authenticate: connect_go.NewClient[v1.AuthenticateRequest, v1.AuthenticateResponse](
			httpClient,
			baseURL+"/authentication.v1.UserService/Authenticate",
			opts...,
		),
		create: connect_go.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+"/authentication.v1.UserService/Create",
			opts...,
		),
		whoami: connect_go.NewClient[v1.WhoamiRequest, v1.WhoamiResponse](
			httpClient,
			baseURL+"/authentication.v1.UserService/Whoami",
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	authenticate *connect_go.Client[v1.AuthenticateRequest, v1.AuthenticateResponse]
	create       *connect_go.Client[v1.CreateRequest, v1.CreateResponse]
	whoami       *connect_go.Client[v1.WhoamiRequest, v1.WhoamiResponse]
}

// Authenticate calls authentication.v1.UserService.Authenticate.
func (c *userServiceClient) Authenticate(ctx context.Context, req *connect_go.Request[v1.AuthenticateRequest]) (*connect_go.Response[v1.AuthenticateResponse], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// Create calls authentication.v1.UserService.Create.
func (c *userServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Whoami calls authentication.v1.UserService.Whoami.
func (c *userServiceClient) Whoami(ctx context.Context, req *connect_go.Request[v1.WhoamiRequest]) (*connect_go.Response[v1.WhoamiResponse], error) {
	return c.whoami.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the authentication.v1.UserService service.
type UserServiceHandler interface {
	Authenticate(context.Context, *connect_go.Request[v1.AuthenticateRequest]) (*connect_go.Response[v1.AuthenticateResponse], error)
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	Whoami(context.Context, *connect_go.Request[v1.WhoamiRequest]) (*connect_go.Response[v1.WhoamiResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/authentication.v1.UserService/Authenticate", connect_go.NewUnaryHandler(
		"/authentication.v1.UserService/Authenticate",
		svc.Authenticate,
		opts...,
	))
	mux.Handle("/authentication.v1.UserService/Create", connect_go.NewUnaryHandler(
		"/authentication.v1.UserService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/authentication.v1.UserService/Whoami", connect_go.NewUnaryHandler(
		"/authentication.v1.UserService/Whoami",
		svc.Whoami,
		opts...,
	))
	return "/authentication.v1.UserService/", mux
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) Authenticate(context.Context, *connect_go.Request[v1.AuthenticateRequest]) (*connect_go.Response[v1.AuthenticateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.UserService.Authenticate is not implemented"))
}

func (UnimplementedUserServiceHandler) Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.UserService.Create is not implemented"))
}

func (UnimplementedUserServiceHandler) Whoami(context.Context, *connect_go.Request[v1.WhoamiRequest]) (*connect_go.Response[v1.WhoamiResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.UserService.Whoami is not implemented"))
}
