// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authentication/v1/auth.proto

package authenticationv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ZacharyLangley/igru-web-server/pkg/proto/authentication/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "authentication.v1.AuthService"
)

// AuthServiceClient is a client for the authentication.v1.AuthService service.
type AuthServiceClient interface {
	GetToken(context.Context, *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error)
	GetSessions(context.Context, *connect_go.Request[v1.GetSessionsRequest]) (*connect_go.Response[v1.GetSessionsResponse], error)
	DeleteSession(context.Context, *connect_go.Request[v1.DeleteSessionRequest]) (*connect_go.Response[v1.DeleteSessionResponse], error)
}

// NewAuthServiceClient constructs a client for the authentication.v1.AuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		getToken: connect_go.NewClient[v1.GetTokenRequest, v1.GetTokenResponse](
			httpClient,
			baseURL+"/authentication.v1.AuthService/GetToken",
			opts...,
		),
		getSessions: connect_go.NewClient[v1.GetSessionsRequest, v1.GetSessionsResponse](
			httpClient,
			baseURL+"/authentication.v1.AuthService/GetSessions",
			opts...,
		),
		deleteSession: connect_go.NewClient[v1.DeleteSessionRequest, v1.DeleteSessionResponse](
			httpClient,
			baseURL+"/authentication.v1.AuthService/DeleteSession",
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	getToken      *connect_go.Client[v1.GetTokenRequest, v1.GetTokenResponse]
	getSessions   *connect_go.Client[v1.GetSessionsRequest, v1.GetSessionsResponse]
	deleteSession *connect_go.Client[v1.DeleteSessionRequest, v1.DeleteSessionResponse]
}

// GetToken calls authentication.v1.AuthService.GetToken.
func (c *authServiceClient) GetToken(ctx context.Context, req *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error) {
	return c.getToken.CallUnary(ctx, req)
}

// GetSessions calls authentication.v1.AuthService.GetSessions.
func (c *authServiceClient) GetSessions(ctx context.Context, req *connect_go.Request[v1.GetSessionsRequest]) (*connect_go.Response[v1.GetSessionsResponse], error) {
	return c.getSessions.CallUnary(ctx, req)
}

// DeleteSession calls authentication.v1.AuthService.DeleteSession.
func (c *authServiceClient) DeleteSession(ctx context.Context, req *connect_go.Request[v1.DeleteSessionRequest]) (*connect_go.Response[v1.DeleteSessionResponse], error) {
	return c.deleteSession.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the authentication.v1.AuthService service.
type AuthServiceHandler interface {
	GetToken(context.Context, *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error)
	GetSessions(context.Context, *connect_go.Request[v1.GetSessionsRequest]) (*connect_go.Response[v1.GetSessionsResponse], error)
	DeleteSession(context.Context, *connect_go.Request[v1.DeleteSessionRequest]) (*connect_go.Response[v1.DeleteSessionResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/authentication.v1.AuthService/GetToken", connect_go.NewUnaryHandler(
		"/authentication.v1.AuthService/GetToken",
		svc.GetToken,
		opts...,
	))
	mux.Handle("/authentication.v1.AuthService/GetSessions", connect_go.NewUnaryHandler(
		"/authentication.v1.AuthService/GetSessions",
		svc.GetSessions,
		opts...,
	))
	mux.Handle("/authentication.v1.AuthService/DeleteSession", connect_go.NewUnaryHandler(
		"/authentication.v1.AuthService/DeleteSession",
		svc.DeleteSession,
		opts...,
	))
	return "/authentication.v1.AuthService/", mux
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) GetToken(context.Context, *connect_go.Request[v1.GetTokenRequest]) (*connect_go.Response[v1.GetTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.AuthService.GetToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetSessions(context.Context, *connect_go.Request[v1.GetSessionsRequest]) (*connect_go.Response[v1.GetSessionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.AuthService.GetSessions is not implemented"))
}

func (UnimplementedAuthServiceHandler) DeleteSession(context.Context, *connect_go.Request[v1.DeleteSessionRequest]) (*connect_go.Response[v1.DeleteSessionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.AuthService.DeleteSession is not implemented"))
}
